<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dbvalley.premier.qms.prodquality.mapper.PulloffPeriodChkServiceMapper"> 
	 
	<!-- 이탈력정기검사 계획 상세 -->	 
	<select id="selectPulloffPeriodChkInfo" parameterType="hashmap" resultType="hashmap">
		SELECT  A.COMPANYCD
		       ,A.CUSTCD 
		       ,A.KINDCD AS KIND_CD
		       ,A.PLANT
		       ,A.PARTNO AS APNO
		       ,A.PARTNM AS APNONM
		       ,GET_ITGR_CODE_NAME(A.CUSTCD, #{LANG}) AS CUSTNM	
		       ,A.YY
		       ,A.JUGI
		       ,A.EXAM_TYPE
		       ,A.S_GBN
		       ,A.M01 AS M1
		       ,A.M02 AS M2
		       ,A.M03 AS M3
		       ,A.M04 AS M4
		       ,A.M05 AS M5
		       ,A.M06 AS M6
		       ,A.M07 AS M7
		       ,A.M08 AS M8
		       ,A.M09 AS M9
		       ,A.M10 AS M10
		       ,A.M11 AS M11
		       ,A.M12 AS M12
		       ,A.DESCR
		  FROM Q_585 A
         WHERE A.COMPANYCD = #{COMPANYCD}
           AND A.YY     = #{YY}
           AND A.EXAM_TYPE = 'H'
         <if test="PLANT != null and PLANT != ''">
           AND A.PLANT = #{PLANT}
         </if>
         <if test="APNO != null and APNO != ''">   
           AND A.PARTNO = #{APNO}
         </if>
	</select> 

	<!-- 이탈력정기검사 실적 상세 -->	 
	<select id="selectPulloffPeriodChkCmpltInfo" parameterType="hashmap" resultType="hashmap">
		SELECT   A.Q_595_SEQ AS SEQ
				,A.COMPANYCD
				,A.PLANT
				,A.YY
				,A.CUSTCD
				,A.PARTNO AS APNO
				,TO_CHAR(TO_DATE(A.EXAM_DAY),'YYYY-MM-DD') AS EXAM_DAY
				,TO_NUMBER(SUBSTR(A.EXAM_DAY,5,2)) AS MONTH
				,A.EXAM_TYPE
				,A.EXAM_USER
				,A.JUDGE
				,A.JUDGE_RMK
				,B.KINDCD AS KIND_CD
				,B.PARTNM AS APNONM
				,B.S_GBN
				,B.JUGI
           FROM Q_595 A, Q_585 B
          WHERE A.COMPANYCD = #{COMPANYCD}
          	AND A.YY     = #{YY}
            AND A.EXAM_TYPE = 'H'
            AND SUBSTR(A.EXAM_DAY, 5,2) = LPAD(#{MONTH}, 2, '0')
          <if test="PLANT != null and PLANT != ''">
            AND A.PLANT  = #{PLANT}
          </if>
          <if test="APNO != null and APNO != ''">   
            AND A.PARTNO = #{APNO}
          </if>
          <if test="SEQ != null and SEQ != ''">
            AND A.Q_595_SEQ = #{SEQ}
          </if>
			AND A.COMPANYCD = B.COMPANYCD(+)
			AND A.YY = B.YY(+)				   
			AND A.PLANT  = B.PLANT(+)
			AND A.PARTNO = B.PARTNO(+)
			AND A.CUSTCD = B.CUSTCD(+)
			AND A.EXAM_TYPE = B.EXAM_TYPE(+) 
	</select> 
		
	<!-- 품명조회 -->
	<select id="selectGetPartname" parameterType="hashmap" resultType="hashmap">
		SELECT GET_PART_NAME(#{COMPANYCD},#{PARTNO}) AS PARTNM
		FROM DUAL
	</select>
	
	<!-- 실적 SEQ 조회 -->
	<select id="getQ_595_SEQ" parameterType="hashmap" resultType="hashmap">
		SELECT MAX(Q_595_SEQ) KEEP(DENSE_RANK FIRST ORDER BY EXAM_DAY DESC) AS SEQ  
		  FROM Q_595 
		 WHERE COMPANYCD = #{COMPANYCD}
		   AND PLANT	 = #{PLANT}
		   AND YY		 = #{YY}
		   AND EXAM_TYPE = 'H'
		   AND PARTNO	 = #{APNO}
		   AND CUSTCD	 = '0000000000'
		   AND SUBSTR(EXAM_DAY,5,2) = LPAD(#{MONTH}, 2, '0')
	</select>

	 <!-- 이탈력정기검사 조회 -->
	<select id="getSearchList" parameterType="hashmap" resultType="hashmap">
	    SELECT ROWNUM AS RNO, B.*
	    FROM (	SELECT 
				       A.COMPANYCD
				      ,A.CUSTCD 
				      ,A.KINDCD
				      ,A.PLANT
				      ,A.PARTNO AS APNO
				      ,A.PARTNM AS APNONM
				      ,A.YY
				      ,A.S_GBN
				      ,GET_ITGR_CODE_NAME(A.S_GBN, #{LANG}) AS S_GBN_NM
                      ,MAX(DECODE(A.M01,'Y',DECODE(B.MM,'01',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M1
                      ,MAX(DECODE(A.M02,'Y',DECODE(B.MM,'02',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M2
                      ,MAX(DECODE(A.M03,'Y',DECODE(B.MM,'03',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M3
                      ,MAX(DECODE(A.M04,'Y',DECODE(B.MM,'04',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M4
                      ,MAX(DECODE(A.M05,'Y',DECODE(B.MM,'05',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M5
                      ,MAX(DECODE(A.M06,'Y',DECODE(B.MM,'06',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M6
                      ,MAX(DECODE(A.M07,'Y',DECODE(B.MM,'07',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M7
                      ,MAX(DECODE(A.M08,'Y',DECODE(B.MM,'08',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M8
                      ,MAX(DECODE(A.M09,'Y',DECODE(B.MM,'09',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M9
                      ,MAX(DECODE(A.M10,'Y',DECODE(B.MM,'10',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M10
                      ,MAX(DECODE(A.M11,'Y',DECODE(B.MM,'11',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M11
                      ,MAX(DECODE(A.M12,'Y',DECODE(B.MM,'12',DECODE(GET_SIGNTYPECD('QMS_Q_595_H', B.Q_595_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M12
				      ,A.EXAM_TYPE
				      ,A.JUGI
				      ,A.DESCR
				  FROM Q_585 A, (SELECT MAX(Q_595_SEQ) KEEP(DENSE_RANK FIRST ORDER BY EXAM_DAY DESC) AS Q_595_SEQ,
						                MAX(COMPANYCD) KEEP(DENSE_RANK FIRST ORDER BY EXAM_DAY DESC) AS COMPANYCD,
						                MAX(PLANT) KEEP(DENSE_RANK FIRST ORDER BY EXAM_DAY DESC) AS PLANT,
						                MAX(YY) KEEP(DENSE_RANK FIRST ORDER BY EXAM_DAY DESC) AS YY,
						                MAX(CUSTCD) KEEP(DENSE_RANK FIRST ORDER BY EXAM_DAY DESC) AS CUSTCD,
						                MAX(PARTNO) KEEP(DENSE_RANK FIRST ORDER BY EXAM_DAY DESC) AS PARTNO,
						                MAX(EXAM_TYPE) KEEP(DENSE_RANK FIRST ORDER BY EXAM_DAY DESC) AS EXAM_TYPE,
						                MAX(JUDGE) KEEP(DENSE_RANK FIRST ORDER BY EXAM_DAY DESC) AS JUDGE,
						                MAX(SUBSTR(EXAM_DAY,5,2)) KEEP(DENSE_RANK FIRST ORDER BY EXAM_DAY DESC) AS MM
				                   FROM Q_595 
				                  WHERE COMPANYCD = #{COMPANYCD}
				                  	AND YY     = #{YY}
				                    AND EXAM_TYPE = 'H'
				                  <if test="PLANT != null and PLANT != ''">
				                    AND PLANT  = #{PLANT}
				                  </if>
				                  <if test="APNO != null and APNO != ''">
				                    AND PARTNO LIKE #{APNO}||'%'
				                  </if>
				                  GROUP BY PARTNO, SUBSTR(EXAM_DAY,5,2) ) B  
				 WHERE A.COMPANYCD = #{COMPANYCD}
				   AND A.YY     = #{YY}
				 <if test="PLANT != null and PLANT != ''">
				   AND A.PLANT  = #{PLANT}
				 </if>
				   AND A.EXAM_TYPE = 'H'
                 <if test="APNO != null and APNO != ''">   
                   AND A.PARTNO LIKE #{APNO}||'%'
                 </if>
                 <if test="KIND_CD != null and KIND_CD != ''">
                   AND A.KINDCD LIKE #{KIND_CD}||'%'
                 </if>
                 
				   AND A.COMPANYCD = B.COMPANYCD(+)
				   AND A.YY = B.YY(+)				   
				   AND A.PLANT  = B.PLANT(+)
				   AND A.PARTNO = B.PARTNO(+)
				   AND A.CUSTCD = B.CUSTCD(+)
				   AND A.EXAM_TYPE = B.EXAM_TYPE(+)
				 GROUP BY A.COMPANYCD
						 ,A.CUSTCD 
						 ,A.KINDCD
						 ,A.PLANT
						 ,A.PARTNO
						 ,A.PARTNM
						 ,A.S_GBN
						 ,A.YY
						 ,A.EXAM_TYPE
						 ,A.JUGI
						 ,A.DESCR 
				 ORDER BY 1,4,2,3,5 ) B
	</select>
	 
	<!-- 품목선택 팝업 조회 -->
	<select id="selectPartList" parameterType="hashmap" resultType="hashmap">
		    SELECT A.*, GET_PART_NAME(A.COMPANYCD, A.PARTNO) AS PARTNM
		    FROM   Q_585_ITEM A
			WHERE A.COMPANYCD = #{COMPANYCD}
			  AND A.YY     = #{YY}
			  AND A.EXAM_TYPE = 'H'
			<if test="PLANT != null and PLANT != ''">
			  AND A.PLANT  = #{PLANT}
			</if>
			<if test="APNO != null and APNO != ''">   
			  AND A.REL_PARTNO = #{APNO}
			</if>
			
		    ORDER BY A.PARTNO
	</select>

	<!-- 이탈력정기점검 계획 저장 -->
	<update id="saveRegistInfo" parameterType="json">	 
		MERGE INTO Q_585 A USING(
	    SELECT   #{COMPANYCD} AS COMPANYCD
				,'0000000000' AS CUSTCD   
				,#{KIND_CD}   AS KIND_CD  
				,#{PLANT}     AS PLANT    
				,#{APNO}      AS APNO     
				,#{APNONM}    AS APNONM   
				,#{YY}        AS YY		
				,#{S_GBN}     AS S_GBN    
				,#{M1}        AS M1       
				,#{M2}        AS M2       
				,#{M3}        AS M3       
				,#{M4}        AS M4       
				,#{M5}        AS M5       
				,#{M6}        AS M6       
				,#{M7}        AS M7       
				,#{M8}        AS M8       
				,#{M9}        AS M9       
				,#{M10}       AS M10      
				,#{M11}       AS M11      
				,#{M12}       AS M12      
				,#{EXAM_TYPE} AS EXAM_TYPE
				,#{JUGI}      AS JUGI
				,#{DESCR}     AS DESCR    
				,#{ACCNO}     AS ACCNO 
	      FROM DUAL) D
		ON (A.COMPANYCD = D.COMPANYCD
			AND A.YY = D.YY
			AND A.PARTNO = D.APNO
			AND A.PLANT = D.PLANT
			AND A.CUSTCD = D.CUSTCD
			AND A.EXAM_TYPE = D.EXAM_TYPE)
		WHEN MATCHED THEN
		    UPDATE SET   A.KINDCD          = D.KIND_CD   
						,A.JUGI            = D.JUGI     
						,A.M01             = D.M1      
						,A.M02             = D.M2      
						,A.M03             = D.M3      
						,A.M04             = D.M4      
						,A.M05             = D.M5      
						,A.M06             = D.M6      
						,A.M07             = D.M7      
						,A.M08             = D.M8      
						,A.M09             = D.M9      
						,A.M10             = D.M10      
						,A.M11             = D.M11      
						,A.M12             = D.M12      
						,A.S_GBN           = D.S_GBN
						,A.DESCR           = D.DESCR
						,A.LOGIN_COMPANYCD = D.COMPANYCD
						,A.LOGIN_ID        = D.ACCNO   
						,A.LOGIN_YMD       = SYSDATE    
		WHEN NOT MATCHED THEN
		    INSERT (  A.COMPANYCD
					, A.CUSTCD
					, A.YY
					, A.EXAM_TYPE 
					, A.PLANT
					, A.PARTNO
					, A.PARTNM
					, A.KINDCD
					, A.JUGI
					, A.S_GBN
					, A.M01 
					, A.M02 
					, A.M03 
					, A.M04 
					, A.M05 
					, A.M06 
					, A.M07 
					, A.M08 
					, A.M09 
					, A.M10 
					, A.M11 
					, A.M12 
					, A.DESCR
					, A.LOGIN_COMPANYCD
					, A.LOGIN_ID  
					, A.LOGIN_YMD
		    		)
		    VALUES (  D.COMPANYCD
					, D.CUSTCD
					, D.YY
					, 'H' 
					, D.PLANT
					, D.APNO
					, D.APNONM
					, D.KIND_CD
					, D.JUGI
					, D.S_GBN
					, D.M1
					, D.M2
					, D.M3
					, D.M4
					, D.M5
					, D.M6
					, D.M7
					, D.M8
					, D.M9
					, D.M10
					, D.M11
					, D.M12
					, D.DESCR
		    		, D.COMPANYCD
		    		, D.ACCNO
		    		, SYSDATE
		    )
	</update> 
	
	<!-- 이탈력정기점검 실적 저장 -->
	<update id="saveCmpltRegistInfo" parameterType="hashmap">
       	<selectKey resultType="String" keyProperty="SEQ" order="BEFORE">
			<choose>
				<when test="SEQ == '' or SEQ == null">
					SELECT SEQ_Q_595.NEXTVAL FROM DUAL
				</when>
				<otherwise>
					SELECT #{SEQ} FROM DUAL
				</otherwise>
			</choose> 
	    </selectKey>	 
		MERGE INTO Q_595 A USING(
	    SELECT #{SEQ} AS SEQ,
	           #{COMPANYCD} AS COMPANYCD,
               #{PLANT} AS PLANT,
               #{YY} AS YY,
              '0000000000' AS CUSTCD,
               #{APNO} AS PARTNO,
               TO_CHAR(TO_DATE(#{EXAM_DAY},'YYYY-MM-DD'), 'YYYYMMDD') AS EXAM_DAY,
               'H' AS EXAM_TYPE,
               #{EXAM_USER} AS EXAM_USER,
               #{JUDGE} AS JUDGE,
	           #{JUDGE_RMK} AS JUDGE_RMK,
	           #{ACCNO} AS ACCNO 
	      FROM DUAL) D
		ON (	A.Q_595_SEQ = D.SEQ
			AND A.COMPANYCD = D.COMPANYCD
			AND A.PLANT     = D.PLANT    
			AND A.YY        = D.YY       
			AND A.CUSTCD    = D.CUSTCD   
			AND A.PARTNO    = D.PARTNO   
			AND A.EXAM_DAY  = D.EXAM_DAY 
		   )
		WHEN MATCHED THEN
		    UPDATE SET A.EXAM_USER       = D.EXAM_USER,
		    		   A.JUDGE           = D.JUDGE,
		    		   A.JUDGE_RMK       = D.JUDGE_RMK,
					   A.LOGIN_COMPANYCD = D.COMPANYCD,
					   A.LOGIN_ID        = D.ACCNO,
					   A.LOGIN_YMD       = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT (  A.Q_595_SEQ
		    		, A.COMPANYCD
					, A.PLANT
					, A.YY
					, A.CUSTCD
					, A.PARTNO
					, A.EXAM_DAY
					, A.EXAM_TYPE
					, A.EXAM_USER
					, A.JUDGE
					, A.JUDGE_RMK
					, A.LOGIN_COMPANYCD
					, A.LOGIN_ID  
					, A.LOGIN_YMD 
		    		)
		    VALUES (  D.SEQ
		    		, D.COMPANYCD
		    		, D.PLANT
		    		, D.YY
		    		, D.CUSTCD
		    		, D.PARTNO
		    		, D.EXAM_DAY 
		    		, D.EXAM_TYPE
		    		, D.EXAM_USER
		    		, D.JUDGE
		    		, D.JUDGE_RMK
		    		, D.COMPANYCD
		    		, D.ACCNO
		    		, SYSDATE
		    )
	</update> 
	
	<!-- 품목 저장 -->
	<update id="insertPartInfo" parameterType="json">
		MERGE INTO Q_585_ITEM A USING(
		    SELECT #{COMPANYCD} AS COMPANYCD,  
		           #{PARTNO} AS PARTNO,
		           #{APNO} AS REL_PARTNO,
	               #{PLANT} AS PLANT,
	               #{YY} AS YY,
	              '0000000000' AS CUSTCD,
	               'H' AS EXAM_TYPE,
		           #{ACCNO} AS ACCNO
		      FROM DUAL
	      ) D
		ON (A.COMPANYCD = D.COMPANYCD
			AND A.YY = D.YY
			AND A.PARTNO = D.PARTNO
			AND A.PLANT = D.PLANT
			AND A.CUSTCD = D.CUSTCD
			AND A.REL_PARTNO = D.REL_PARTNO
			AND A.EXAM_TYPE = D.EXAM_TYPE)
		WHEN MATCHED THEN
		    UPDATE SET 	A.LOGIN_COMPANYCD = D.COMPANYCD,
			    		A.LOGIN_ID        = D.ACCNO,
			    		A.LOGIN_YMD		  = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT ( A.COMPANYCD 
					,A.YY 	
					,A.PARTNO 
					,A.PLANT 
					,A.CUSTCD 
					,A.REL_PARTNO
					,A.EXAM_TYPE 
		    		,A.LOGIN_COMPANYCD 
		    		,A.LOGIN_ID
		    		,A.LOGIN_YMD
		    		)
		    VALUES ( D.COMPANYCD 
		    		,D.YY       
		    		,D.PARTNO   
		    		,D.PLANT    
		    		,D.CUSTCD   
		    		,D.REL_PARTNO
		    		,D.EXAM_TYPE  
		    		,D.COMPANYCD 
		    		,D.ACCNO
		    		,SYSDATE
		    		)	
	</update>
	
	
	<!-- 계획복사 -->
	<update id="insertPlanCopy" parameterType="json">	
		MERGE INTO Q_585 A USING(
				SELECT *
                  FROM Q_585
                 WHERE COMPANYCD = #{COMPANYCD}
                   AND YY = #{SRC_YY}
                   AND EXAM_TYPE = 'H'
	          ) D
	        ON (A.COMPANYCD = D.COMPANYCD
	        AND A.PLANT  = D.PLANT
	        AND A.CUSTCD = D.CUSTCD     
	        AND A.PARTNO = D.PARTNO
	        AND A.YY = #{OBJ_YY}
	        AND A.EXAM_TYPE = 'H')
	        WHEN MATCHED THEN
	            UPDATE SET   A.PARTNM          = D.PARTNM   
	                        ,A.KINDCD          = D.KINDCD   
	                        ,A.JUGI            = D.JUGI     
	                        ,A.M01             = D.M01      
	                        ,A.M02             = D.M02      
	                        ,A.M03             = D.M03      
	                        ,A.M04             = D.M04      
	                        ,A.M05             = D.M05      
	                        ,A.M06             = D.M06      
	                        ,A.M07             = D.M07      
	                        ,A.M08             = D.M08      
	                        ,A.M09             = D.M09      
	                        ,A.M10             = D.M10      
	                        ,A.M11             = D.M11      
	                        ,A.M12             = D.M12      
	                        ,A.S_GBN           = D.S_GBN    
	                        ,A.LOGIN_COMPANYCD = D.COMPANYCD
	                        ,A.LOGIN_ID        = #{ACCNO}   
	                        ,A.LOGIN_YMD       = SYSDATE    
	        WHEN NOT MATCHED THEN
	            INSERT (  A.COMPANYCD      
	                     ,A.PLANT          
	                     ,A.YY             
	                     ,A.CUSTCD         
	                     ,A.PARTNO         
	                     ,A.EXAM_TYPE      
	                     ,A.PARTNM         
	                     ,A.KINDCD         
	                     ,A.JUGI           
	                     ,A.M01            
	                     ,A.M02            
	                     ,A.M03            
	                     ,A.M04            
	                     ,A.M05            
	                     ,A.M06            
	                     ,A.M07            
	                     ,A.M08            
	                     ,A.M09            
	                     ,A.M10            
	                     ,A.M11            
	                     ,A.M12            
	                     ,A.S_GBN  
	                     ,A.LOGIN_COMPANYCD
	                     ,A.LOGIN_ID       
	                     ,A.LOGIN_YMD      
	                   )
	           VALUES (  D.COMPANYCD      
	                    ,D.PLANT          
	                    ,#{OBJ_YY}        
	                    ,D.CUSTCD         
	                    ,D.PARTNO         
	                    ,'H'      
	                    ,D.PARTNM         
	                    ,D.KINDCD         
	                    ,D.JUGI           
	                    ,D.M01            
	                    ,D.M02            
	                    ,D.M03            
	                    ,D.M04            
	                    ,D.M05            
	                    ,D.M06            
	                    ,D.M07            
	                    ,D.M08            
	                    ,D.M09            
	                    ,D.M10            
	                    ,D.M11            
	                    ,D.M12            
	                    ,D.S_GBN  
	                    ,D.COMPANYCD 
	                    ,#{ACCNO}
	                    ,SYSDATE
	                  )
	</update>
                    
	<!-- 이탈력정기점검 실적정보 삭제  -->
	<delete id="deleteRegistInfo" parameterType="hashmap"> 
		DELETE FROM Q_585 A
		WHERE  A.COMPANYCD = #{COMPANYCD}
		AND	   A.YY 	   = #{YY}
		AND	   A.PARTNO    = #{APNO}
		AND	   A.PLANT     = #{PLANT}
		AND	   A.CUSTCD    = '0000000000'
		AND	   A.EXAM_TYPE = #{EXAM_TYPE}
	</delete>
	                    
	<!-- 이탈력정기점검 실적정보 삭제  -->
	<delete id="deleteCmpltRegistInfo" parameterType="hashmap"> 
		DELETE FROM Q_595 
		WHERE	Q_595_SEQ = #{SEQ}
	</delete>
	
	<!-- 품목 삭제 -->
	<delete id="deletetPartInfo" parameterType="hashmap"> 
		DELETE FROM Q_585_ITEM A
		WHERE  A.COMPANYCD = #{COMPANYCD}
		AND	   A.YY 	   = #{YY}
		AND	   A.REL_PARTNO= #{APNO}
		AND	   A.PLANT     = #{PLANT}
		AND	   A.CUSTCD    = '0000000000'
		AND	   A.EXAM_TYPE = #{EXAM_TYPE}
		
	</delete>

</mapper>