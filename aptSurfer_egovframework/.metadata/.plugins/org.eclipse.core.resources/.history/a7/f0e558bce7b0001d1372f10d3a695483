<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dbvalley.premier.qms.prodquality.mapper.IncomChkMgmtServiceMapper"> 
	<select id="getFromToDate" parameterType="int" resultType="json">
		SELECT TO_CHAR(SYSDATE,'YYYY-MM-DD') AS E_DATE,
		       TO_CHAR(SYSDATE +(#{OFFSET}),'YYYY-MM-DD') AS S_DATE,
		       TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, #{OFFSET}),'YY'),'YYYY-MM-DD') AS S_DATE_T_YY,
		       TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE, #{OFFSET}),'MM'),'YYYY-MM-DD') AS S_DATE_T_MM
		FROM DUAL
	</select>
	
	<!-- 수입검사 계획 상세 -->	 
	<select id="selectIncomChkMgmtSelInfo" parameterType="hashmap" resultType="hashmap">
		SELECT A.COMPANYCD
		      ,A.PLANT
		      ,A.VENDCD AS VEND_CD
		      ,PREMIER_SYS.GETCMPYNMBYCMPYSN(A.VENDCD) AS VEND_NM 
		      ,A.PARTNO AS APNO
		      ,A.REV_NO   
		      ,A.KINDCD AS KIND_CD
		      ,A.PARTNM AS APNONM
		      ,A.GUIDELINE
		      ,NVL(TO_CHAR(TO_DATE(A.RYMD),'YYYY-MM-DD'), '') AS RYMD
		      ,NVL(TO_CHAR(TO_DATE(A.SYMD),'YYYY-MM-DD'), '') AS SYMD
		      ,NVL(TO_CHAR(TO_DATE(A.EYMD),'YYYY-MM-DD'), '') AS EYMD
		      ,A.DESCR    
		      ,A.REASON
		      ,A.SIGN_SEQ AS SEQ
		  FROM Q_615 A
		 WHERE A.COMPANYCD = #{COMPANYCD}
		   AND A.PLANT	   = #{PLANT}
		   AND A.PARTNO    = #{APNO}
		   AND A.VENDCD    = #{VEND_CD}
		   AND A.REV_NO    = #{REV_NO}
	</select> 
	
	<!-- 수입검사 계획 SKD 상세 -->	 
	<select id="selectIncomChkMgmtSelSkdInfo" parameterType="hashmap" resultType="hashmap">
		SELECT A.COMPANYCD
		      ,A.PLANT
		      ,A.VENDCD AS VEND_CD
		      ,PREMIER_SYS.GETCMPYNMBYCMPYSN(A.VENDCD) AS VEND_NM 
		      ,A.PARTNO AS APNO
		      ,A.REV_NO   
		      ,A.KINDCD AS KIND_CD
		      ,A.PARTNM AS APNONM
		      ,A.GUIDELINE
		      ,NVL(TO_CHAR(TO_DATE(A.RYMD),'YYYY-MM-DD'), '') AS RYMD
		      ,NVL(TO_CHAR(TO_DATE(A.SYMD),'YYYY-MM-DD'), '') AS SYMD
		      ,NVL(TO_CHAR(TO_DATE(A.EYMD),'YYYY-MM-DD'), '') AS EYMD
		      ,A.DESCR    
		      ,A.REASON
		      ,A.SIGN_SEQ AS SEQ
		  FROM Q_615_SKD A
		 WHERE A.COMPANYCD = #{COMPANYCD}
		   AND A.PLANT	   = #{PLANT}
		   AND A.PARTNO    = #{APNO}
		   AND A.VENDCD    = #{VEND_CD}
		   AND A.REV_NO    = #{REV_NO}
	</select> 

	<!-- 수입검사 성적서(갑) 상세 -->	 
	<select id="selectIncomChkMgmtCmpltInfo" parameterType="hashmap" resultType="hashmap">
		SELECT A.VENDCD AS VEND_CD,
		       PREMIER_SYS.GETCMPYNMBYCMPYSN(A.VENDCD) AS VEND_NM,
		       A.PARTNO AS APNO, A.PARTNM AS APNONM, A.KINDCD AS KIND_CD,
		       B.SUPP_A, B.SUPP_B, B.SUPP_C,
		       B.K_A, B.K_B, B.K_C, B.PJ, B.PJ_ETC,
		       TO_CHAR(TO_DATE(B.WRITE_DATE),'YYYY-MM-DD') AS WRITE_DATE,
		       TO_CHAR(TO_DATE(B.SUBMIT_DAY),'YYYY-MM-DD') AS SUBMIT_DAY,
		       TO_CHAR(TO_DATE(A.EO_DATE),'YYYY-MM-DD') AS EO_DATE_CHAR,
		       B.DESCR, B.LOT_NO, B.APRV_ITEM, 
		       (CASE WHEN A.SDATE IS NULL THEN ''
		             WHEN A.EDATE IS NULL THEN TO_CHAR(TO_DATE(A.SDATE),'YYYY-MM-DD')||' ~ 검사지정 해제시까지'
		        ELSE TO_CHAR(TO_DATE(A.SDATE),'YYYY-MM-DD')||' ~ '||TO_CHAR(TO_DATE(A.EDATE),'YYYY-MM-DD') END) AS INSP_PERI,
		       #{CMPLT_STS} AS CMPLT_STS,
		       #{DLVY_QTY}  AS DLVY_QTY,
		       #{BAL_NO} AS BAL_NO,
		       1 AS DLVY_CHASU,
		       A.*
		FROM Q_251 A, ( SELECT *
		                FROM Q_251_1
		                WHERE BAL_NO = #{BAL_NO_NEW}
		              ) B
		WHERE 1=1
		AND   A.COMPANYCD = B.COMPANYCD(+)
		AND   A.PLANT = B.PLANT(+)
		AND   A.VENDCD = B.VENDCD(+)
		AND   A.PARTNO = B.PARTNO(+)
		AND   A.COMPANYCD = #{COMPANYCD}
		AND   A.PLANT = #{PLANT}
		AND   A.PARTNO = #{APNO}
		AND   A.VENDCD = #{VEND_CD}
		AND   A.REV_NO = #{REV_NO}
	</select>

	<!-- 수입검사 실적 SEQ -->	 
	<select id="getQ_615_SEQ" parameterType="hashmap" resultType="hashmap">
		SELECT  A.SIGN_SEQ AS SEQ
           FROM Q_615 A
          WHERE A.COMPANYCD	 = #{COMPANYCD}
            AND A.PLANT		 = #{PLANT}
            AND A.VENDCD	 = #{VEND_CD}
            AND A.PARTNO	 = #{APNO}
            AND A.REV_NO	 = #{REV_NO}
	</select>
	
	<!-- 수입검사 SKD 실적 SEQ -->	 
	<select id="getQ_615_SKD_SEQ" parameterType="hashmap" resultType="hashmap">
		SELECT  A.SIGN_SEQ AS SEQ
           FROM Q_615_SKD A
          WHERE A.COMPANYCD	 = #{COMPANYCD}
            AND A.PLANT		 = #{PLANT}
            AND A.VENDCD	 = #{VEND_CD}
            AND A.PARTNO	 = #{APNO}
            AND A.REV_NO	 = #{REV_NO}
	</select>
	
	<!-- 수입검사 선정등록 MAX REV_NO -->	 
	<select id="getQ_615_MAX_REV_NO" parameterType="json" resultType="hashmap">
		SELECT NVL(MAX(A.REV_NO), '1') AS MAX_REV_NO 
		  FROM Q_615 A
          WHERE A.COMPANYCD	 = #{COMPANYCD}
            AND A.PLANT		 = #{PLANT}
            AND A.VENDCD	 = #{VEND_CD}
            AND A.PARTNO	 = #{APNO}     
	</select>
	
	<!-- 수입검사 선정등록 SKD MAX REV_NO -->	 
	<select id="getQ_615_SKD_MAX_REV_NO" parameterType="json" resultType="hashmap">
		SELECT NVL(MAX(A.REV_NO), '1') AS MAX_REV_NO 
		  FROM Q_615_SKD A
          WHERE A.COMPANYCD	 = #{COMPANYCD}
            AND A.PLANT		 = #{PLANT}
            AND A.VENDCD	 = #{VEND_CD}
            AND A.PARTNO	 = #{APNO}     
	</select>
		
	<!-- 수입검사 기준서 MAX REV_NO -->	 
	<select id="getQ_251_MAX_REV_NO" parameterType="json" resultType="hashmap">
		SELECT NVL(MAX(A.REV_NO), '1') AS MAX_REV_NO 
		  FROM Q_251 A
		 WHERE A.COMPANYCD = #{COMPANYCD}
		   AND A.PLANT     = #{PLANT}    
		   AND A.VENDCD    = #{VEND_CD}  
		   AND A.PARTNO    = #{APNO}     
	</select>

	<!-- 수입검사 기준서(갑) 상세 -->	 
	<select id="selectIncomChkMgmtStdInfo" parameterType="hashmap" resultType="hashmap">
		SELECT A.COMPANYCD
		      ,A.PLANT
		      ,A.VENDCD AS VEND_CD
		      ,A.PARTNO AS APNO
		      ,A.REV_NO
		      ,TO_CHAR(TO_DATE(A.SDATE),'YYYY-MM-DD') AS SDATE
		      ,TO_CHAR(TO_DATE(A.EDATE),'YYYY-MM-DD') AS EDATE
		      ,A.KINDCD AS KIND_CD
		      ,PREMIER_SYS.GETCMPYNMBYCMPYSN(A.VENDCD) AS VEND_NM
		      ,A.PARTNM AS APNONM
		      ,A.GRADE
		      ,A.IRE
		      ,A.EO_NO
		      ,TO_CHAR(TO_DATE(A.EO_DATE),'YYYY-MM-DD') AS EO_DATE
		      ,A.GUARANTOR
		      ,A.REASON
		      ,A.CAVITY
		      ,A.SKD_GUBUN
		  FROM Q_251 A  
		 WHERE A.COMPANYCD = #{COMPANYCD}
		   AND A.PLANT     = #{PLANT}
		   AND A.PARTNO	   = #{APNO}
		   AND A.VENDCD	   = #{VEND_CD}
		   AND A.REV_NO    = #{REV_NO}
	</select> 
	
	<!-- 수입검사 선정등록 신규 리비전 -->	 
	<select id="selectIncomChkMgmtSelNewRevInfo" parameterType="hashmap" resultType="hashmap">
		SELECT NVL(MAX(A.REV_NO),'0') AS MAX_REV_NO
		  FROM Q_615 A  
		 WHERE A.COMPANYCD = #{COMPANYCD}
		   AND A.PLANT     = #{PLANT}
		   AND A.PARTNO    = #{APNO}
		   AND A.VENDCD    = #{VEND_CD}
	</select> 
	
	<!-- 수입검사 선정등록 SKD 신규 리비전 -->	 
	<select id="selectIncomChkMgmtSelSkdNewRevInfo" parameterType="hashmap" resultType="hashmap">
		SELECT NVL(MAX(A.REV_NO),'0') AS MAX_REV_NO
		  FROM Q_615_SKD A  
		 WHERE A.COMPANYCD = #{COMPANYCD}
		   AND A.PLANT     = #{PLANT}
		   AND A.PARTNO    = #{APNO}
		   AND A.VENDCD    = #{VEND_CD}
	</select> 
	
	<!-- 수입검사 기준서 최종 리비전 -->	 
	<select id="selectIncomChkMgmtStdNewRevInfo" parameterType="hashmap" resultType="hashmap">
		SELECT NVL(MAX(A.REV_NO),'0') AS MAX_REV_NO
		  FROM Q_251 A  
		 WHERE A.COMPANYCD = #{COMPANYCD}
		   AND A.PLANT     = #{PLANT}
		   AND A.PARTNO    = #{APNO}
		   AND A.VENDCD    = #{VEND_CD}
	</select> 

	<!-- 수입검사 선정등록 내용 리스트 조회 -->	 
	<select id="getSelCheckList" parameterType="hashmap" resultType="hashmap">
		SELECT A.COMPANYCD
			 , A.PLANT
			 , A.PARTNO
			 , A.VENDCD
			 , A.REV_NO
			 , A.EXAM_CD
			 , A.DESCR
		  FROM Q_610 A
		 WHERE A.COMPANYCD = #{COMPANYCD}
		   AND A.PLANT	   = #{PLANT}
		   AND A.PARTNO	   = #{APNO}
		   AND A.VENDCD    = #{VEND_CD}
		   AND A.REV_NO	   = #{REV_NO}
	</select>
	
	<!-- 수입검사 선정등록 SKD 내용 리스트 조회 -->	 
	<select id="getSelSkdCheckList" parameterType="hashmap" resultType="hashmap">
		SELECT A.COMPANYCD
			 , A.PLANT
			 , A.PARTNO
			 , A.VENDCD
			 , A.REV_NO
			 , A.EXAM_CD
			 , A.DESCR
		  FROM Q_610_SKD A
		 WHERE A.COMPANYCD = #{COMPANYCD}
		   AND A.PLANT	   = #{PLANT}
		   AND A.PARTNO	   = #{APNO}
		   AND A.VENDCD    = #{VEND_CD}
		   AND A.REV_NO	   = #{REV_NO}
	</select>

	<!-- 수입검사 기준서(을) 검사항목 리스트 조회 -->	 
	<select id="getStdCheckList" parameterType="hashmap" resultType="hashmap">
		SELECT A.SEQ
			 , A.COMPANYCD
			 , A.PLANT
			 , A.VENDCD AS VEND_CD
			 , A.PARTNO AS APNO
			 , A.REV_NO
			 , A.SNO
			 , A.MGR_CLASS
			 , PREMIER_SYS.GET_ITGR_CODE_NAME(A.MGR_CLASS,#{LANG}) AS MGR_CLASS_NM
			 , A.ITEM
			 , A.STANDARD
			 , A.MTH
			 , A.SPEC_MIN
			 , A.SPEC_MAX
			 , A.MGT_SPEC_MIN
			 , A.MGT_SPEC_MAX
			 , A.SEQ AS SUB_SEQ
			 , ROWNUM AS RNO
			 , A.SKD_GUBUN
			 , A.INSP_QTY
		  FROM Q_252 A
		 WHERE A.COMPANYCD = #{COMPANYCD}
		   AND A.PLANT	   = #{PLANT}
		   AND A.PARTNO	   = #{APNO}
		   AND A.VENDCD    = #{VEND_CD}
		   AND A.REV_NO	   = #{REV_NO}
		 ORDER BY A.SEQ,A.COMPANYCD,A.PLANT,A.VENDCD,A.PARTNO,A.REV_NO,A.SNO
	</select>

	<!-- 수입검사 성적서(을) 검사항목 리스트 조회 -->	 
	<select id="getCmpltCheckList" parameterType="hashmap" resultType="hashmap">
		SELECT ROWNUM AS RNO, 
			   #{CAVITY} AS CAVITY,
			   #{CAVITY_IDX} AS CAVITY_IDX,
			   D.*
		FROM (	SELECT C.*
			    FROM (	SELECT A.SEQ
							 , A.COMPANYCD
							 , A.PLANT
							 , A.VENDCD AS VEND_CD
							 , A.PARTNO AS APNO
							 , A.REV_NO
							 , A.SNO
							 , A.MGR_CLASS
							 , PREMIER_SYS.GET_ITGR_CODE_NAME(A.MGR_CLASS,#{LANG}) AS MGR_CLASS_NM
							 , A.ITEM
							 , A.STANDARD
							 , A.MTH
							 , A.SPEC_MIN
							 , A.SPEC_MAX
							 , A.MGT_SPEC_MIN
							 , A.MGT_SPEC_MAX
							 , A.SEQ AS SUB_SEQ
							 , A.INSP_QTY
							 , B.BAL_NO 
							 ,'0000003305' AS EXAM_USER_CODE 
							 , PREMIER_SYS.GET_ITGR_CODE_NAME('0000003305', #{LANG}) AS EXAM_USER
							 , B.SX1 AS X1
							 , B.SX2 AS X2
							 , B.SX3 AS X3
							 , B.SX4 AS X4
							 , B.SX5 AS X5
							 , (CASE WHEN B.SDECGBN = '0000001757' THEN GETMESSAGE('label.acceptance',#{LANG})
									 WHEN B.SDECGBN = '0000001758' THEN GETMESSAGE('label.referral',#{LANG})
									 ELSE '' END) AS DECGBN
						  FROM Q_252 A,
						  	   (SELECT * FROM Q_252_1 WHERE BAL_NO = #{BAL_NO_NEW} AND CAVITY = #{CAVITY_IDX} ) B
						 WHERE A.COMPANYCD = #{COMPANYCD}
						   AND A.PLANT	   = #{PLANT}
						   AND A.PARTNO	   = #{APNO}
						   AND A.VENDCD    = #{VEND_CD}
						   AND A.REV_NO	   = #{REV_NO}
						   AND A.COMPANYCD = B.COMPANYCD(+)
						   AND A.PLANT	   = B.PLANT(+)
						   AND A.PARTNO	   = B.PARTNO(+)
						   AND A.VENDCD    = B.VENDCD(+)
						   AND A.SEQ	   = B.SEQ(+)
						UNION ALL
						SELECT A.SEQ
							 , A.COMPANYCD
							 , A.PLANT
							 , A.VENDCD AS VEND_CD
							 , A.PARTNO AS APNO
							 , A.REV_NO
							 , A.SNO
							 , A.MGR_CLASS
							 , PREMIER_SYS.GET_ITGR_CODE_NAME(A.MGR_CLASS,#{LANG}) AS MGR_CLASS_NM
							 , A.ITEM
							 , A.STANDARD
							 , A.MTH
							 , A.SPEC_MIN
							 , A.SPEC_MAX
							 , A.MGT_SPEC_MIN
							 , A.MGT_SPEC_MAX
							 , A.SEQ AS SUB_SEQ
							 , A.INSP_QTY
							 , B.BAL_NO 
							 ,'0000003306' AS EXAM_USER_CODE 
							 , PREMIER_SYS.GET_ITGR_CODE_NAME('0000003306', #{LANG}) AS EXAM_USER    
							 , B.CX1 AS X1
							 , B.CX2 AS X2
							 , B.CX3 AS X3
							 , B.CX4 AS X4
							 , B.CX5 AS X5
							 , (CASE WHEN B.CDECGBN = '0000001757' THEN GETMESSAGE('label.acceptance',#{LANG})
									 WHEN B.CDECGBN = '0000001758' THEN GETMESSAGE('label.referral',#{LANG})
									 ELSE '' END) AS DECGBN
						  FROM Q_252 A, 
						  	   (SELECT * FROM Q_252_1 WHERE BAL_NO = #{BAL_NO_NEW} AND CAVITY = #{CAVITY_IDX} ) B
						 WHERE A.COMPANYCD = #{COMPANYCD}
						   AND A.PLANT	   = #{PLANT}
						   AND A.PARTNO	   = #{APNO}
						   AND A.VENDCD    = #{VEND_CD}
						   AND A.REV_NO	   = #{REV_NO}
						   AND A.COMPANYCD = B.COMPANYCD(+)
						   AND A.PLANT	   = B.PLANT(+)
						   AND A.PARTNO	   = B.PARTNO(+)
						   AND A.VENDCD    = B.VENDCD(+)
						   AND A.SEQ	   = B.SEQ(+)
					) C
				 ORDER BY C.SEQ,C.EXAM_USER ) D
		WHERE MGR_CLASS <![CDATA[<>]]> '0000003298'
	</select>
	
	<!-- 수입검사 SKD 성적서(을) 검사항목 리스트 조회 -->	 
	<select id="getCmpltSkdCheckList" parameterType="hashmap" resultType="hashmap">
		SELECT ROWNUM AS RNO, 
			   #{CAVITY} AS CAVITY,
			   #{CAVITY_IDX} AS CAVITY_IDX,
			   D.*
		FROM (	SELECT C.*
			    FROM (	SELECT A.SEQ
							 , A.COMPANYCD
							 , A.PLANT
							 , A.VENDCD AS VEND_CD
							 , A.PARTNO AS APNO
							 , A.REV_NO
							 , A.SNO
							 , A.MGR_CLASS
							 , PREMIER_SYS.GET_ITGR_CODE_NAME(A.MGR_CLASS,#{LANG}) AS MGR_CLASS_NM
							 , A.ITEM
							 , A.STANDARD
							 , A.MTH
							 , A.SPEC_MIN
							 , A.SPEC_MAX
							 , A.MGT_SPEC_MIN
							 , A.MGT_SPEC_MAX
							 , A.SEQ AS SUB_SEQ
							 , A.INSP_QTY
							 , B.BAL_NO 
							 , 1 AS FLAG
							 ,'0000003305' AS EXAM_USER_CODE 
							 , PREMIER_SYS.GET_ITGR_CODE_NAME('0000003305', #{LANG}) AS EXAM_USER
							 , B.SX1 AS X1
							 , B.SX2 AS X2
							 , B.SX3 AS X3
							 , B.SX4 AS X4
							 , B.SX5 AS X5
							 , (CASE WHEN B.SDECGBN = '0000001757' THEN GETMESSAGE('label.acceptance',#{LANG})
									 WHEN B.SDECGBN = '0000001758' THEN GETMESSAGE('label.referral',#{LANG})
									 ELSE '' END) AS DECGBN
						  FROM Q_252 A,
						  	   (SELECT * FROM Q_252_1 WHERE BAL_NO = #{BAL_NO_NEW} AND CAVITY = #{CAVITY_IDX} ) B
						 WHERE A.COMPANYCD = #{COMPANYCD}
						   AND A.PLANT	   = #{PLANT}
						   AND A.PARTNO	   = #{APNO}
						   AND A.VENDCD    = #{VEND_CD}
						   AND A.REV_NO	   = #{REV_NO}
						   AND A.COMPANYCD = B.COMPANYCD(+)
						   AND A.PLANT	   = B.PLANT(+)
						   AND A.PARTNO	   = B.PARTNO(+)
						   AND A.VENDCD    = B.VENDCD(+)
						   AND A.SEQ	   = B.SEQ(+)
						UNION ALL
						SELECT A.SEQ
							 , A.COMPANYCD
							 , A.PLANT
							 , A.VENDCD AS VEND_CD
							 , A.PARTNO AS APNO
							 , A.REV_NO
							 , A.SNO
							 , A.MGR_CLASS
							 , PREMIER_SYS.GET_ITGR_CODE_NAME(A.MGR_CLASS,#{LANG}) AS MGR_CLASS_NM
							 , A.ITEM
							 , A.STANDARD
							 , A.MTH
							 , A.SPEC_MIN
							 , A.SPEC_MAX
							 , A.MGT_SPEC_MIN
							 , A.MGT_SPEC_MAX
							 , A.SEQ AS SUB_SEQ
							 , A.INSP_QTY
							 , B.BAL_NO 
							 , 2 AS FLAG
							 ,'0000003564' AS EXAM_USER_CODE 
							 , PREMIER_SYS.GET_ITGR_CODE_NAME('0000003564', #{LANG}) AS EXAM_USER    
							 , B.FX1 AS X1
							 , B.FX2 AS X2
							 , B.FX3 AS X3
							 , B.FX4 AS X4
							 , B.FX5 AS X5
							 , (CASE WHEN B.FDECGBN = '0000001757' THEN GETMESSAGE('label.acceptance',#{LANG})
									 WHEN B.FDECGBN = '0000001758' THEN GETMESSAGE('label.referral',#{LANG})
									 ELSE '' END) AS DECGBN
						  FROM Q_252 A, 
						  	   (SELECT * FROM Q_252_1 WHERE BAL_NO = #{BAL_NO_NEW} AND CAVITY = #{CAVITY_IDX} ) B
						 WHERE A.COMPANYCD = #{COMPANYCD}
						   AND A.PLANT	   = #{PLANT}
						   AND A.PARTNO	   = #{APNO}
						   AND A.VENDCD    = #{VEND_CD}
						   AND A.REV_NO	   = #{REV_NO}
						   AND A.COMPANYCD = B.COMPANYCD(+)
						   AND A.PLANT	   = B.PLANT(+)
						   AND A.PARTNO	   = B.PARTNO(+)
						   AND A.VENDCD    = B.VENDCD(+)
						   AND A.SEQ	   = B.SEQ(+)
						UNION ALL
						SELECT A.SEQ
							 , A.COMPANYCD
							 , A.PLANT
							 , A.VENDCD AS VEND_CD
							 , A.PARTNO AS APNO
							 , A.REV_NO
							 , A.SNO
							 , A.MGR_CLASS
							 , PREMIER_SYS.GET_ITGR_CODE_NAME(A.MGR_CLASS,#{LANG}) AS MGR_CLASS_NM
							 , A.ITEM
							 , A.STANDARD
							 , A.MTH
							 , A.SPEC_MIN
							 , A.SPEC_MAX
							 , A.MGT_SPEC_MIN
							 , A.MGT_SPEC_MAX
							 , A.SEQ AS SUB_SEQ
							 , A.INSP_QTY
							 , B.BAL_NO 
							 , 3 AS FLAG
							 ,'0000003306' AS EXAM_USER_CODE 
							 , PREMIER_SYS.GET_ITGR_CODE_NAME('0000003306', #{LANG}) AS EXAM_USER    
							 , B.CX1 AS X1
							 , B.CX2 AS X2
							 , B.CX3 AS X3
							 , B.CX4 AS X4
							 , B.CX5 AS X5
							 , (CASE WHEN B.CDECGBN = '0000001757' THEN GETMESSAGE('label.acceptance',#{LANG})
									 WHEN B.CDECGBN = '0000001758' THEN GETMESSAGE('label.referral',#{LANG})
									 ELSE '' END) AS DECGBN
						  FROM Q_252 A, 
						  	   (SELECT * FROM Q_252_1 WHERE BAL_NO = #{BAL_NO_NEW} AND CAVITY = #{CAVITY_IDX} ) B
						 WHERE A.COMPANYCD = #{COMPANYCD}
						   AND A.PLANT	   = #{PLANT}
						   AND A.PARTNO	   = #{APNO}
						   AND A.VENDCD    = #{VEND_CD}
						   AND A.REV_NO	   = #{REV_NO}
						   AND A.COMPANYCD = B.COMPANYCD(+)
						   AND A.PLANT	   = B.PLANT(+)
						   AND A.PARTNO	   = B.PARTNO(+)
						   AND A.VENDCD    = B.VENDCD(+)
						   AND A.SEQ	   = B.SEQ(+)
					) C
				 ORDER BY C.SEQ, C.FLAG ) D
		WHERE MGR_CLASS <![CDATA[<>]]> '0000003298'		 
	</select>

	<!-- 수입검사 성적서(갑) 검토,승인자 리스트 조회 -->	 
	<select id="getCmpltApprList" parameterType="hashmap" resultType="hashmap">
		SELECT A.CODE_SEQ, A.CODE_NAME AS EXAM_USER,
		       B.COMPANYCD, B.PLANT, B.VEND_CD, B.APNO, B.BAL_NO, B.KIND_CD, 
		       NVL(B.S1,GET_Q_251_1(#{COMPANYCD},#{PLANT},#{VEND_CD},#{APNO},A.CODE_SEQ,'1')) AS S1, 
		       NVL(B.S2,GET_Q_251_1(#{COMPANYCD},#{PLANT},#{VEND_CD},#{APNO},A.CODE_SEQ,'2')) AS S2, 
		       NVL(B.S3,GET_Q_251_1(#{COMPANYCD},#{PLANT},#{VEND_CD},#{APNO},A.CODE_SEQ,'3')) AS S3
		FROM (
		      SELECT X.CODE_ORDERNO, Y.*
		      FROM SYS_ITGR_CODE_MGMT X, SYS_ITGR_CODE_LANG Y
		      WHERE X.CODE_SEQ = Y.CODE_SEQ
		      AND   X.CODE_SEQ_UP = '0000003304'
		      AND   Y.CODE_SEQ_LANG = #{LANG}
		      <if test="SKD_PLANT == null or SKD_PLANT == ''">
		      AND   X.CODE_SEQ <![CDATA[<>]]> '0000003564'
		      </if>
		     ) A, ( SELECT *
		            FROM V_Q_251_1
		            WHERE 1=1
		            AND   COMPANYCD = #{COMPANYCD}
		            AND   PLANT = #{PLANT}
		            AND   VEND_CD = #{VEND_CD}
		            AND   APNO = #{APNO}
		            AND   BAL_NO = #{BAL_NO}
		          ) B
		WHERE A.CODE_SEQ = B.CODE_SEQ(+)
		ORDER BY A.CODE_ORDERNO 
	</select>
	
	<!-- 수입검사 성적서 개정이력 리스트 조회 -->	 
	<select id="getCmpltHisList" parameterType="hashmap" resultType="hashmap">
	    SELECT ROWNUM AS RNO, B.*
	    FROM ( SELECT  A.COMPANYCD
		              ,A.PLANT
		              ,A.VENDCD AS VEND_CD
		              ,A.PARTNO AS APNO
		              ,A.REV_NO
		              ,TO_CHAR(TO_DATE(A.SDATE),'YYYY-MM-DD') AS SDATE
		              ,TO_CHAR(TO_DATE(A.EDATE),'YYYY-MM-DD') AS EDATE
		              ,A.KINDCD AS KIND_CD
		              ,A.EO_NO
		              ,TO_CHAR(TO_DATE(A.EO_DATE),'YYYY-MM-DD') AS EO_DATE
		              ,A.REASON
				  FROM Q_251 A  
				 WHERE A.COMPANYCD = #{COMPANYCD}
				 <if test="PLANT != null and PLANT != ''">
				   AND A.PLANT  = #{PLANT}
				 </if>
		         <if test="APNO != null and APNO != ''">   
		           AND A.PARTNO = #{APNO}
		         </if>
		         <if test="KIND_CD != null and KIND_CD != ''">
		           AND A.KINDCD = #{KIND_CD}
		         </if>
		         <if test="VEND_CD != null and VEND_CD != ''">
		           AND A.VENDCD = #{VEND_CD}
		         </if>
		         ORDER BY 1,2,3,8,4,5 ) B
	</select>
	
	<!-- 수입검사 기준서 조회 -->
	<select id="getSearchStdList" parameterType="hashmap" resultType="hashmap">
	    SELECT ROWNUM AS RNO, B.*
	    FROM ( SELECT  A.COMPANYCD
					  ,PREMIER_SYS.GETCMPYNMBYCMPYSN(A.COMPANYCD) AS COMPANY_NM
					  ,A.PLANT
					  ,PREMIER_SYS.GET_PLANT_NAME(A.COMPANYCD, A.PLANT) AS PLANT_NM
		              ,A.VENDCD AS VEND_CD
		              ,A.PARTNO AS APNO
		              ,A.REV_NO
		              ,TO_CHAR(TO_DATE(A.SDATE),'YYYY-MM-DD') AS SDATE
		              ,TO_CHAR(TO_DATE(A.EDATE),'YYYY-MM-DD') AS EDATE
		              ,A.KINDCD AS KIND_CD
		              ,PREMIER_SYS.GETCMPYNMBYCMPYSN(A.VENDCD) AS VEND_NM
		              ,A.PARTNM AS APNONM
		              ,GET_ITGR_CODE_NAME(A.GRADE, #{LANG}) AS GRADE
		              ,GET_ITGR_CODE_NAME(A.IRE, #{LANG}) AS IRE
		              ,A.EO_NO
		              ,TO_CHAR(TO_DATE(A.EO_DATE),'YYYY-MM-DD') AS EO_DATE
		              ,A.GUARANTOR
		              ,A.REASON
		              ,(SELECT MAX(REV_NO) AS REV_NO 
		              	  FROM Q_251
		              	 WHERE A.COMPANYCD = COMPANYCD
						   AND A.PLANT  = PLANT
				           AND A.PARTNO = PARTNO
				           AND A.VENDCD = VENDCD  ) AS MAX_REV_NO
				  FROM Q_251 A  
				 WHERE A.COMPANYCD = '0000000001'
				 <if test="PLANT != null and PLANT != ''">
				   AND A.PLANT  = #{PLANT}
				 </if>
		         <if test="APNO != null and APNO != ''">   
		           AND A.PARTNO LIKE #{APNO}||'%'
		         </if>
		         <if test="KIND_CD != null and KIND_CD != ''">
		           AND A.KINDCD LIKE #{KIND_CD}||'%'
		         </if>
		         <if test="VEND_CD != null and VEND_CD != ''">
		           AND A.VENDCD = #{VEND_CD}
		         </if>
		         <if test="GRADE != null and GRADE != ''">
		           AND A.GRADE = #{GRADE}
		         </if>
		         <if test="SKD_GUBUN != null and SKD_GUBUN != ''">
		           AND A.SKD_GUBUN = #{SKD_GUBUN}
		         </if>
		         ORDER BY 1,2,3,8,4 ) B
	</select>
	
	<!-- 수입검사 기준서 복사 대상 조회 -->
	<select id="getSearchCopyStdList" parameterType="hashmap" resultType="hashmap">
		SELECT TO_CHAR(ROWNUM) AS RNO, B.*
		FROM ( SELECT  A.COMPANYCD
					  ,PREMIER_SYS.GETCMPYNMBYCMPYSN(A.COMPANYCD) AS COMPANY_NM
					  ,A.PLANT
					  ,PREMIER_SYS.GET_PLANT_NAME(A.COMPANYCD, A.PLANT) AS PLANT_NM
					  ,A.VENDCD AS VEND_CD
					  ,A.PARTNO AS APNO
					  ,A.REV_NO
					  ,TO_CHAR(TO_DATE(A.SDATE),'YYYY-MM-DD') AS SDATE
					  ,TO_CHAR(TO_DATE(A.EDATE),'YYYY-MM-DD') AS EDATE
					  ,A.KINDCD AS KIND_CD
					  ,PREMIER_SYS.GETCMPYNMBYCMPYSN(A.VENDCD) AS VEND_NM
					  ,A.PARTNM AS APNONM
					  ,GET_ITGR_CODE_NAME(A.GRADE, #{LANG}) AS GRADE
					  ,GET_ITGR_CODE_NAME(A.IRE, #{LANG}) AS IRE
					  ,A.EO_NO
					  ,TO_CHAR(TO_DATE(A.EO_DATE),'YYYY-MM-DD') AS EO_DATE
					  ,A.GUARANTOR
					  ,A.REASON
				  FROM Q_251 A,
					   (SELECT COMPANYCD, PLANT, PARTNO, VENDCD, MAX(REV_NO) AS REV_NO 
						  FROM Q_251
					    GROUP BY COMPANYCD, PLANT, PARTNO, VENDCD ) B
				 WHERE A.COMPANYCD = #{COMPANYCD}
				 <if test="PLANT != null and PLANT != ''">
				   AND A.PLANT  = #{PLANT}
				 </if>
				   AND A.REV_NO = B.REV_NO
				   AND A.COMPANYCD = B.COMPANYCD
				   AND A.PLANT  = B.PLANT
				   AND A.PARTNO = B.PARTNO
				   AND A.VENDCD = B.VENDCD
				 ORDER BY 1,2,3,8,4 ) B
	</select>
	
	 <!-- 수입검사 선정등록 조회 -->
	<select id="getSearchSelList" parameterType="hashmap" resultType="hashmap">
		SELECT ROWNUM AS RNO, B.*
	    FROM (	SELECT A.COMPANYCD
					  ,A.PLANT
					  ,PREMIER_SYS.GET_PLANT_NAME_NEW(PLANT) AS PLANT_NM
					  ,A.KINDCD AS KIND_CD
					  ,A.PARTNO AS APNO
					  ,A.VENDCD AS VEND_CD
					  ,PREMIER_SYS.GETCMPYNMBYCMPYSN(A.VENDCD) AS VEND_NM 
					  ,A.REV_NO
					  ,A.PARTNM AS APNONM
					  ,GET_ITGR_CODE_NAME(A.GUIDELINE, #{LANG}) AS GUIDELINE
					  ,TO_CHAR(TO_DATE(A.RYMD),'YYYY-MM-DD') AS RYMD
					  ,TO_CHAR(TO_DATE(A.SYMD),'YYYY-MM-DD') AS SYMD
					  ,TO_CHAR(TO_DATE(A.EYMD),'YYYY-MM-DD') AS EYMD
					  ,A.DESCR
					  ,GET_ITGR_CODE_NAME(A.REASON, #{LANG}) AS REASON
					  ,(CASE WHEN GET_SIGNTYPECD('QMS_Q_615', A.SIGN_SEQ)  = 'A' THEN '결재대기'
					  		 WHEN GET_SIGNTYPECD('QMS_Q_615', A.SIGN_SEQ)  = 'B' THEN '결재진행'
					  		 WHEN GET_SIGNTYPECD('QMS_Q_615', A.SIGN_SEQ)  = 'C' THEN '결재완료'
					  		 WHEN GET_SIGNTYPECD('QMS_Q_615', A.SIGN_SEQ)  = 'D' THEN '반려' 
					  		 ELSE '-' END) AS APPR_STS
				  FROM Q_615 A
		         WHERE A.COMPANYCD = #{COMPANYCD}
				 <if test="PLANT != null and PLANT != ''">
				   AND A.PLANT  = #{PLANT}
				 </if>
		         <if test="APNO != null and APNO != ''">
		           AND A.PARTNO LIKE #{APNO}||'%'
		         </if>
                 <if test="APNONM != null and APNONM != ''">
                   AND A.PARTNM LIKE #{APNONM}||'%'
                 </if>
		         <if test="KIND_CD != null and KIND_CD != ''">
		           AND A.KINDCD LIKE #{KIND_CD}||'%'
		         </if>
                 <if test="KIND_NM != null and KIND_NM != ''">
                   AND A.KINDCD LIKE #{KIND_NM}||'%'
                 </if>
		         <if test="VEND_CD != null and VEND_CD != ''">
		           AND A.VENDCD LIKE #{VEND_CD}||'%'
		         </if>		         
		         <if test="GUIDELINE != null and GUIDELINE != ''">
		           AND A.GUIDELINE = #{GUIDELINE}
		         </if>
                   AND A.REV_NO = (SELECT MAX(REV_NO) 
									 FROM Q_615
									WHERE COMPANYCD = A.COMPANYCD
									  AND PLANT		= A.PLANT
									  AND VENDCD	= A.VENDCD
									  AND PARTNO	= A.PARTNO
									GROUP BY COMPANYCD,PLANT,VENDCD,PARTNO,PARTNM)
		         ORDER BY 1,2,5,3,4 ) B
	</select>
	
	<!-- 수입검사 선정등록 SKD 조회 -->
	<select id="getSearchSelSkdList" parameterType="hashmap" resultType="hashmap">
		SELECT ROWNUM AS RNO, B.*
	    FROM (	SELECT A.COMPANYCD
					  ,A.PLANT
					  ,PREMIER_SYS.GET_PLANT_NAME_NEW(PLANT) AS PLANT_NM
					  ,PREMIER_SYS.GET_PLANT_NAME_NEW(PLANT_GO) AS PLANT_GO_NM
					  ,A.KINDCD AS KIND_CD
					  ,A.PARTNO AS APNO
					  ,A.VENDCD AS VEND_CD
					  ,PREMIER_SYS.GETCMPYNMBYCMPYSN(A.VENDCD) AS VEND_NM 
					  ,A.REV_NO
					  ,A.PARTNM AS APNONM
					  ,GET_ITGR_CODE_NAME(A.GUIDELINE, #{LANG}) AS GUIDELINE
					  ,TO_CHAR(TO_DATE(A.RYMD),'YYYY-MM-DD') AS RYMD
					  ,TO_CHAR(TO_DATE(A.SYMD),'YYYY-MM-DD') AS SYMD
					  ,TO_CHAR(TO_DATE(A.EYMD),'YYYY-MM-DD') AS EYMD
					  ,A.DESCR
					  ,GET_ITGR_CODE_NAME(A.REASON, #{LANG}) AS REASON
					  ,(CASE WHEN GET_SIGNTYPECD('QMS_Q_615', A.SIGN_SEQ)  = 'A' THEN '결재대기'
					  		 WHEN GET_SIGNTYPECD('QMS_Q_615', A.SIGN_SEQ)  = 'B' THEN '결재진행'
					  		 WHEN GET_SIGNTYPECD('QMS_Q_615', A.SIGN_SEQ)  = 'C' THEN '결재완료'
					  		 WHEN GET_SIGNTYPECD('QMS_Q_615', A.SIGN_SEQ)  = 'D' THEN '반려' 
					  		 ELSE '-' END) AS APPR_STS
				  FROM Q_615_SKD A
		         WHERE A.COMPANYCD = #{COMPANYCD}
				 <if test="PLANT != null and PLANT != ''">
				   AND A.PLANT  = #{PLANT}
				 </if>
		         <if test="APNO != null and APNO != ''">
		           AND A.PARTNO LIKE #{APNO}||'%'
		         </if>
                 <if test="APNONM != null and APNONM != ''">
                   AND A.PARTNM LIKE #{APNONM}||'%'
                 </if>
		         <if test="KIND_CD != null and KIND_CD != ''">
		           AND A.KINDCD LIKE #{KIND_CD}||'%'
		         </if>
                 <if test="KIND_NM != null and KIND_NM != ''">
                   AND A.KINDCD LIKE #{KIND_NM}||'%'
                 </if>
		         <if test="VEND_CD != null and VEND_CD != ''">
		           AND A.VENDCD LIKE #{VEND_CD}||'%'
		         </if>		         
		         <if test="GUIDELINE != null and GUIDELINE != ''">
		           AND A.GUIDELINE = #{GUIDELINE}
		         </if>
                   AND A.REV_NO = (SELECT MAX(REV_NO) 
									 FROM Q_615_SKD
									WHERE COMPANYCD = A.COMPANYCD
									  AND PLANT		= A.PLANT
									  AND VENDCD	= A.VENDCD
									  AND PARTNO	= A.PARTNO
									GROUP BY COMPANYCD,PLANT,VENDCD,PARTNO,PARTNM)
		         ORDER BY 1,2,5,3,4 ) B
	</select>
		
	 <!-- 수입검사 이력현황 조회 -->
	<select id="getSearchHisList" parameterType="hashmap" resultType="hashmap">
		SELECT ROWNUM AS RNO, B.*
	    FROM (	SELECT A.COMPANYCD
				      ,A.PLANT
				      ,PREMIER_SYS.GET_PLANT_NAME_NEW(A.PLANT) AS PLANT_NM
				      ,A.KINDCD AS KIND_CD
				      ,A.PARTNO AS APNO
				      ,A.VENDCD AS VEND_CD
				      ,PREMIER_SYS.GETCMPYNMBYCMPYSN(A.VENDCD) AS VEND_NM 
				      ,A.REV_NO
				      ,A.PARTNM AS APNONM
				      ,GET_ITGR_CODE_NAME(A.GUIDELINE, #{LANG}) AS GUIDELINE
				      ,TO_CHAR(TO_DATE(A.RYMD),'YYYY-MM-DD') AS RYMD
				      ,TO_CHAR(TO_DATE(A.SYMD),'YYYY-MM-DD') AS SYMD
				      ,TO_CHAR(TO_DATE(A.EYMD),'YYYY-MM-DD') AS EYMD
				      ,A.DESCR    
				      ,GET_ITGR_CODE_NAME(A.REASON, #{LANG}) AS REASON
				      ,GETNAMEBYACCNO(LOGIN_ID) AS USER_NM
       				  ,TO_CHAR(LOGIN_YMD,'YYYY-MM-DD HH24:MI:SS') AS USER_DATE
				  FROM Q_615 A
		         WHERE A.COMPANYCD = #{COMPANYCD}
				 <if test="PLANT != null and PLANT != ''">
				   AND A.PLANT  = #{PLANT}
				 </if>
		         <if test="APNO != null and APNO != ''">
		           AND A.PARTNO LIKE #{APNO}||'%'
		         </if>
                 <if test="APNONM != null and APNONM != ''">
                   AND A.PARTNM LIKE #{APNONM}||'%'
                 </if>
		         <if test="KIND_CD != null and KIND_CD != ''">
		           AND A.KINDCD LIKE #{KIND_CD}||'%'
		         </if>
                 <if test="KIND_NM != null and KIND_NM != ''">
                   AND A.KINDCD LIKE #{KIND_NM}||'%'
                 </if>
		         <if test="VEND_CD != null and VEND_CD != ''">
		           AND A.VENDCD LIKE #{VEND_CD}||'%'
		         </if>
		         <if test="GUIDELINE != null and GUIDELINE != ''">
		           AND A.GUIDELINE = #{GUIDELINE}
		         </if>
		         <if test="REASON != null and REASON != ''">
		           AND A.REASON = #{REASON}
		         </if>
				   AND A.REV_NO = (SELECT MAX(REV_NO) 
									 FROM Q_615
									WHERE COMPANYCD = A.COMPANYCD
									  AND PLANT		= A.PLANT
									  AND KINDCD	= A.KINDCD
									  AND VENDCD	= A.VENDCD
									  AND PARTNO	= A.PARTNO
									GROUP BY COMPANYCD,PLANT,KINDCD,VENDCD,PARTNO,PARTNM)
		         ORDER BY 1,2,5,3,4 ) B
	</select>
	
	 <!-- 수입검사 이력현황 상세조회 -->
	<select id="getSearchHisDtlList" parameterType="hashmap" resultType="hashmap">
		SELECT ROWNUM AS RNO, B.*
	    FROM (	SELECT A.COMPANYCD
				      ,A.PLANT
				      ,PREMIER_SYS.GET_PLANT_NAME_NEW(A.PLANT) AS PLANT_NM
				      ,A.KINDCD AS KIND_CD
				      ,A.PARTNO AS APNO
				      ,A.VENDCD AS VEND_CD
				      ,PREMIER_SYS.GETCMPYNMBYCMPYSN(A.VENDCD) AS VEND_NM 
				      ,A.REV_NO
				      ,A.PARTNM AS APNONM
				      ,GET_ITGR_CODE_NAME(A.GUIDELINE, #{LANG}) AS GUIDELINE
				      ,TO_CHAR(TO_DATE(A.RYMD),'YYYY-MM-DD') AS RYMD
				      ,TO_CHAR(TO_DATE(A.SYMD),'YYYY-MM-DD') AS SYMD
				      ,TO_CHAR(TO_DATE(A.EYMD),'YYYY-MM-DD') AS EYMD
				      ,A.DESCR    
				      ,GET_ITGR_CODE_NAME(A.REASON, #{LANG}) AS REASON
				      ,GETNAMEBYACCNO(LOGIN_ID) AS USER_NM
       				  ,TO_CHAR(LOGIN_YMD,'YYYY-MM-DD HH24:MI:SS') AS USER_DATE
				  FROM Q_615 A
		         WHERE A.COMPANYCD = #{COMPANYCD}
				   <if test="PLANT != null and PLANT != ''">
				   AND A.PLANT  = #{PLANT}
				   </if>
		           AND A.PARTNO = #{APNO}
		           AND A.KINDCD = #{KIND_CD}
		           AND A.VENDCD = #{VEND_CD}
		         ORDER BY A.COMPANYCD, A.PLANT, A.SYMD DESC ) B
	</select>
	
	 <!-- 수입검사 실적 조회 -->
	<select id="getSearchCmpltList" parameterType="hashmap" resultType="hashmap">
		SELECT ROWNUM AS RNO, G.*
		  FROM (SELECT DISTINCT C.*, 
					   ( DECODE(F.GUIDELINE, '0000001041', DECODE(E.SDECGBN, NULL, '0', DECODE(E.CDECGBN, NULL, '1', '2'))
														 , DECODE(E.SDECGBN, NULL, '3', DECODE(E.CDECGBN, NULL, '4', '5'))
								) ) AS CMPLT_STS,  							<!-- 협력사미체출(무) : 0, 협력사체출(무): 1, 승인완료(무): 2, 협력사미체출(유) : 3, 협력사체출(유): 4, 승인완료(유): 5 -->
					   ( DECODE(D.REV_NO, NULL, '0', '1' ) ) AS STD_STS,	<!-- 기준서 미등록: 0, 등록: 1 -->
					   D.REV_NO,											<!-- 기준서 최종 리비전 -->
					   D.KIND_CD,
					   D.EO_NO,
					   TO_CHAR(TO_DATE(D.EO_DATE),'YYYY-MM-DD') AS EO_DATE,
					   D.IRE,
					   D.INSP_PERI
				  FROM (SELECT   DECODE(A.COMP_CD,'1000','0000000001') AS COMPANYCD
								,A.PLANT_CD AS PLANT
								,A.BIZ_COMP_CD
								,A.VEND_CD
								,A.VEND_NM
								,TO_CHAR(TO_DATE(A.DLVY_YMD),'YYYY-MM-DD') AS DLVY_YMD
							--	,A.DLVY_CHASU
								,A.BAL_NO
								,A.PART_NO AS APNO
								,A.PART_NM AS APNONM
								,A.DLVY_QTY
						   FROM ( SELECT  COMP_CD
										 ,PLANT_CD
										 ,BIZ_COMP_CD
										 ,(SELECT CMPY_SN FROM COM_COMPANY_INFO WHERE CMPY_IF_CD = BIZ_COMP_CD AND ROWNUM = 1) AS VEND_CD
										 ,(SELECT CMPY_NM FROM COM_COMPANY_INFO WHERE CMPY_IF_CD = BIZ_COMP_CD AND ROWNUM = 1) AS VEND_NM
										 ,DLVY_YMD
										 ,COMP_CD||PLANT_CD||BIZ_COMP_CD||DLVY_YMD||PART_NO AS BAL_NO
										 ,PART_NO
										 ,PART_NM
										 ,SUM(DLVY_QTY) DLVY_QTY
									FROM EDI_V_TRANS_D@HSPORTAL
								   WHERE COMP_CD = (SELECT CMPY_IF_CD FROM COM_COMPANY_INFO WHERE CMPY_SN = #{COMPANYCD} AND ROWNUM = 1)
								     AND PLANT_CD = #{PLANT}
									<if test="VEND_CD != null and VEND_CD != ''">						   
									 AND BIZ_COMP_CD = (SELECT CMPY_IF_CD FROM COM_COMPANY_INFO WHERE CMPY_SN = #{VEND_CD} AND ROWNUM = 1)
									</if>
									<if test="DLVY_YMD != null and DLVY_YMD != ''">
									 AND DLVY_YMD BETWEEN TO_CHAR(TO_DATE(#{DLVY_YMD},'YYYY-MM-DD'), 'YYYYMMDD') AND TO_CHAR(TO_DATE(#{DLVY_YMD},'YYYY-MM-DD'), 'YYYYMMDD')
									</if>
									GROUP BY  COMP_CD
										 ,PLANT_CD
										 ,BIZ_COMP_CD
										 ,DLVY_YMD
										 ,COMP_CD||PLANT_CD||BIZ_COMP_CD||DLVY_YMD||PART_NO
										 ,PART_NO
										 ,PART_NM
								) A
						ORDER BY 1,2,4,9,6,7,8 ) C,
						( SELECT COMPANYCD,PLANT,PARTNO,VENDCD,KINDCD AS KIND_CD,EO_NO,EO_DATE,IRE
								,(CASE WHEN SDATE IS NULL THEN ''
									   WHEN EDATE IS NULL THEN TO_CHAR(TO_DATE(SDATE),'YYYY-MM-DD')||' ~ 검사지정 해제시까지'
									   ELSE TO_CHAR(TO_DATE(SDATE),'YYYY-MM-DD')||' ~ '||TO_CHAR(TO_DATE(EDATE),'YYYY-MM-DD') END) AS INSP_PERI
							    ,MAX(REV_NO) AS REV_NO
							FROM Q_251
						   WHERE SDATE <![CDATA[<=]]> TO_CHAR(TO_DATE(#{DLVY_YMD},'YYYY-MM-DD'), 'YYYYMMDD')
						   GROUP BY COMPANYCD, PLANT, PARTNO, VENDCD, KINDCD, EO_NO, EO_DATE, SDATE, EDATE, IRE ) D,
						Q_252_1 E, Q_615 F
				  WHERE C.COMPANYCD = #{COMPANYCD}
				  <if test="PLANT != null and PLANT != ''">
				    AND C.PLANT  = #{PLANT}
				  </if>
				  <if test="APNO != null and APNO != ''">
				    AND C.APNO LIKE #{APNO}||'%'
				  </if>
				  <if test="APNONM != null and APNONM != ''">
				    AND C.APNONM LIKE #{APNONM}||'%'
				  </if>
				  <if test="VEND_CD != null and VEND_CD != ''">
				    AND C.VEND_CD LIKE #{VEND_CD}||'%'
				  </if>
				  <if test="VEND_NM != null and VEND_NM != ''">
				    AND C.VEND_NM LIKE #{VEND_NM}||'%'
				  </if>	
				  <if test="KINDCD != null and KINDCD != ''">
				    AND D.KIND_CD = #{KINDCD}
				  </if>		  
					AND C.COMPANYCD = D.COMPANYCD(+)
					AND C.PLANT     = D.PLANT(+)
					AND C.APNO      = D.PARTNO(+)
					AND C.VEND_CD   = D.VENDCD(+)
					AND C.BAL_NO    = E.BAL_NO(+)
					AND D.REV_NO    = E.REV_NO(+)
					AND F.COMPANYCD = E.COMPANYCD(+)
					AND F.PLANT     = E.PLANT(+)
					AND F.PARTNO    = E.PARTNO(+)
					AND F.VENDCD    = E.VENDCD(+)
					AND C.COMPANYCD = F.COMPANYCD
					AND C.PLANT     = F.PLANT
					AND C.APNO      = F.PARTNO
					AND C.VEND_CD   = F.VENDCD
					AND F.REV_NO    = (SELECT MAX(REV_NO)
										 FROM Q_615
										WHERE COMPANYCD = C.COMPANYCD
										  AND PLANT     = C.PLANT
										  AND PARTNO    = C.APNO
										  AND VENDCD    = C.VEND_CD) ) G
	</select>

	<!-- 수입검사 계획 저장 -->
	<update id="saveSelRegistInfo" parameterType="json">
	    <selectKey resultType="String" keyProperty="SEQ" order="BEFORE">
			<choose>
				<when test="SEQ == '' or SEQ == null">
					SELECT SEQ_Q_615.NEXTVAL FROM DUAL
				</when>
				<otherwise>
					SELECT #{SEQ} FROM DUAL
				</otherwise>
			</choose> 
	    </selectKey>
		MERGE INTO Q_615 A USING(
	    SELECT   #{COMPANYCD} AS COMPANYCD
				,#{PLANT}     AS PLANT
				,#{VEND_CD}   AS VEND_CD
				,#{APNO}      AS APNO
				,<choose>
					<when test="REV_NO == '' or REV_NO == null">
						(SELECT NVL(MAX(REV_NO), 0) + 1 
						  FROM Q_615
						 WHERE COMPANYCD  = #{COMPANYCD}
						   AND PLANT      = #{PLANT}    
						   AND VENDCD     = #{VEND_CD}  
						   AND PARTNO     = #{APNO} ) AS REV_NO
					</when>
					<otherwise>
						(SELECT #{REV_NO} AS REV_NO FROM DUAL) AS REV_NO
					</otherwise>
				 </choose>
				,#{KIND_CD}   AS KIND_CD
				,#{APNONM}    AS APNONM
				,#{GUIDELINE} AS GUIDELINE
				,TO_CHAR(TO_DATE(#{RYMD},'YYYY-MM-DD'), 'YYYYMMDD') AS RYMD
				,TO_CHAR(TO_DATE(#{SYMD},'YYYY-MM-DD'), 'YYYYMMDD') AS SYMD
				,TO_CHAR(TO_DATE(#{EYMD},'YYYY-MM-DD'), 'YYYYMMDD') AS EYMD
				,#{DESCR}     AS DESCR
				,#{REASON}    AS REASON
				,#{SEQ}		  AS SEQ
				,#{ACCNO}     AS ACCNO 
	      FROM DUAL) D
		ON (    A.COMPANYCD  = D.COMPANYCD
			AND A.PLANT      = D.PLANT    
			AND A.VENDCD     = D.VEND_CD	
			AND A.PARTNO     = D.APNO     
			AND A.REV_NO     = D.REV_NO   )
		WHEN MATCHED THEN
		    UPDATE SET   A.KINDCD          = D.KIND_CD
						,A.PARTNM          = D.APNONM
						,A.GUIDELINE       = D.GUIDELINE
						,A.RYMD            = D.RYMD
						,A.SYMD            = D.SYMD
						,A.EYMD            = D.EYMD
						,A.DESCR           = D.DESCR
						,A.REASON          = D.REASON
						,A.SIGN_SEQ        = D.SEQ
						,A.LOGIN_COMPANYCD = D.COMPANYCD
						,A.LOGIN_ID        = D.ACCNO
						,A.LOGIN_YMD       = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT (  A.COMPANYCD
					, A.PLANT
					, A.VENDCD
					, A.PARTNO
					, A.REV_NO
					, A.KINDCD
					, A.PARTNM
					, A.GUIDELINE
					, A.RYMD
					, A.SYMD
					, A.EYMD
					, A.DESCR
					, A.REASON
					, A.SIGN_SEQ
					, A.LOGIN_COMPANYCD
					, A.LOGIN_ID  
					, A.LOGIN_YMD
		    		)
		    VALUES (  D.COMPANYCD
					, D.PLANT    
					, D.VEND_CD   
					, D.APNO   
					, D.REV_NO   
					, D.KIND_CD  
					, D.APNONM   
					, D.GUIDELINE
					, D.RYMD     
					, D.SYMD     
					, D.EYMD     
					, D.DESCR    
					, D.REASON
					, D.SEQ
		    		, D.COMPANYCD
		    		, D.ACCNO
		    		, SYSDATE
		    )
	</update> 
	
	<!-- 수입검사 SKD 계획 저장 -->
	<update id="saveSelSkdRegistInfo" parameterType="json">
	    <selectKey resultType="String" keyProperty="SEQ" order="BEFORE">
			<choose>
				<when test="SEQ == '' or SEQ == null">
					SELECT SEQ_Q_615_SKD.NEXTVAL FROM DUAL
				</when>
				<otherwise>
					SELECT #{SEQ} FROM DUAL
				</otherwise>
			</choose> 
	    </selectKey>
		MERGE INTO Q_615_SKD A USING(
	    SELECT   #{COMPANYCD} AS COMPANYCD
				,#{PLANT}     AS PLANT
				,#{VEND_CD}   AS VEND_CD
				,#{APNO}      AS APNO
				,<choose>
					<when test="REV_NO == '' or REV_NO == null">
						(SELECT NVL(MAX(REV_NO), 0) + 1 
						  FROM Q_615_SKD
						 WHERE COMPANYCD  = #{COMPANYCD}
						   AND PLANT      = #{PLANT}    
						   AND VENDCD     = #{VEND_CD}  
						   AND PARTNO     = #{APNO} ) AS REV_NO
					</when>
					<otherwise>
						(SELECT #{REV_NO} AS REV_NO FROM DUAL) AS REV_NO
					</otherwise>
				 </choose>
				,#{KIND_CD}   AS KIND_CD
				,#{APNONM}    AS APNONM
				,#{GUIDELINE} AS GUIDELINE
				,TO_CHAR(TO_DATE(#{RYMD},'YYYY-MM-DD'), 'YYYYMMDD') AS RYMD
				,TO_CHAR(TO_DATE(#{SYMD},'YYYY-MM-DD'), 'YYYYMMDD') AS SYMD
				,TO_CHAR(TO_DATE(#{EYMD},'YYYY-MM-DD'), 'YYYYMMDD') AS EYMD
				,#{DESCR}     AS DESCR
				,#{REASON}    AS REASON
				,#{SEQ}		  AS SEQ
				,#{ACCNO}     AS ACCNO 
	      FROM DUAL) D
		ON (    A.COMPANYCD  = D.COMPANYCD
			AND A.PLANT      = D.PLANT    
			AND A.VENDCD     = D.VEND_CD	
			AND A.PARTNO     = D.APNO     
			AND A.REV_NO     = D.REV_NO   )
		WHEN MATCHED THEN
		    UPDATE SET   A.KINDCD          = D.KIND_CD
						,A.PARTNM          = D.APNONM
						,A.GUIDELINE       = D.GUIDELINE
						,A.RYMD            = D.RYMD
						,A.SYMD            = D.SYMD
						,A.EYMD            = D.EYMD
						,A.DESCR           = D.DESCR
						,A.REASON          = D.REASON
						,A.SIGN_SEQ        = D.SEQ
						,A.LOGIN_COMPANYCD = D.COMPANYCD
						,A.LOGIN_ID        = D.ACCNO
						,A.LOGIN_YMD       = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT (  A.COMPANYCD
					, A.PLANT
					, A.VENDCD
					, A.PARTNO
					, A.REV_NO
					, A.KINDCD
					, A.PARTNM
					, A.GUIDELINE
					, A.RYMD
					, A.SYMD
					, A.EYMD
					, A.DESCR
					, A.REASON
					, A.SIGN_SEQ
					, A.LOGIN_COMPANYCD
					, A.LOGIN_ID  
					, A.LOGIN_YMD
		    		)
		    VALUES (  D.COMPANYCD
					, D.PLANT    
					, D.VEND_CD   
					, D.APNO   
					, D.REV_NO   
					, D.KIND_CD  
					, D.APNONM   
					, D.GUIDELINE
					, D.RYMD     
					, D.SYMD     
					, D.EYMD     
					, D.DESCR    
					, D.REASON
					, D.SEQ
		    		, D.COMPANYCD
		    		, D.ACCNO
		    		, SYSDATE
		    )
	</update> 

	<!-- 수입검사 기준서 저장 -->
	<update id="saveStdRegistInfo" parameterType="json">
		MERGE INTO Q_251 A USING(
	    SELECT   #{COMPANYCD} AS COMPANYCD
	    		,#{PLANT}     AS PLANT
				,#{APNO}      AS APNO
				,#{VEND_CD}	  AS VEND_CD
				,#{REV_NO}    AS REV_NO
				,TO_CHAR(TO_DATE(#{SDATE},'YYYY-MM-DD'), 'YYYYMMDD') AS SDATE
				,TO_CHAR(TO_DATE(#{EDATE},'YYYY-MM-DD'), 'YYYYMMDD') AS EDATE
				,#{KIND_CD}   AS KIND_CD
				,GET_PART_NAME(#{COMPANYCD},#{APNO}) AS APNONM
				,#{GRADE}     AS GRADE
				,#{IRE}       AS IRE
				,#{EO_NO}     AS EO_NO
				,TO_CHAR(TO_DATE(#{EO_DATE},'YYYY-MM-DD'), 'YYYYMMDD') AS EO_DATE
				,#{GUARANTOR} AS GUARANTOR
				,#{REASON}    AS REASON
				,#{ACCNO}     AS ACCNO
				,#{CAVITY}    AS CAVITY
				,#{SKD_GUBUN} AS SKD_GUBUN
	      FROM DUAL) D
		ON (A.COMPANYCD		= D.COMPANYCD
			AND A.PLANT		= D.PLANT
			AND A.PARTNO	= D.APNO
			AND A.VENDCD	= D.VEND_CD
			AND A.REV_NO	= D.REV_NO)
		WHEN MATCHED THEN
		    UPDATE SET   A.SDATE           = D.SDATE    
						,A.EDATE           = D.EDATE    
						,A.KINDCD          = D.KIND_CD  
						,A.PARTNM          = D.APNONM   
						,A.GRADE           = D.GRADE    
						,A.IRE             = D.IRE      
						,A.EO_NO           = D.EO_NO    
						,A.EO_DATE         = D.EO_DATE  
						,A.GUARANTOR       = D.GUARANTOR
						,A.REASON          = D.REASON
						,A.CAVITY          = D.CAVITY
						,A.SKD_GUBUN       = D.SKD_GUBUN   
						,A.LOGIN_COMPANYCD = D.COMPANYCD
						,A.LOGIN_ID        = D.ACCNO
						,A.LOGIN_YMD       = SYSDATE 
		WHEN NOT MATCHED THEN
		    INSERT (  A.COMPANYCD
					, A.PLANT    
					, A.VENDCD   
					, A.PARTNO   
					, A.REV_NO   
					, A.SDATE    
					, A.EDATE    
					, A.KINDCD   
					, A.PARTNM   
					, A.GRADE    
					, A.IRE      
					, A.EO_NO    
					, A.EO_DATE  
					, A.GUARANTOR
					, A.REASON
					, A.CAVITY  
					, A.SKD_GUBUN 
					, A.LOGIN_COMPANYCD
					, A.LOGIN_ID  
					, A.LOGIN_YMD
		    		)
		    VALUES (  D.COMPANYCD
					, D.PLANT    
					, D.VEND_CD  
					, D.APNO   
					, D.REV_NO   
					, D.SDATE    
					, D.EDATE    
					, D.KIND_CD  
					, D.APNONM   
					, D.GRADE    
					, D.IRE      
					, D.EO_NO    
					, D.EO_DATE  
					, D.GUARANTOR
					, D.REASON
					, D.CAVITY   
					, D.SKD_GUBUN
		    		, D.COMPANYCD
		    		, D.ACCNO
		    		, SYSDATE
		    )
	</update> 
		
	<!-- 수입검사 실적 저장 -->
	<update id="saveCmpltRegistInfo" parameterType="hashmap">
		MERGE INTO Q_251_1 A USING(
	    SELECT  #{COMPANYCD}  AS COMPANYCD
               ,#{PLANT}	  AS PLANT
               ,#{APNO}		  AS APNO
               ,#{VEND_CD}	  AS VEND_CD
               ,#{BAL_NO}	  AS BAL_NO
               ,#{KIND_CD}	  AS KIND_CD
               ,#{APNONM}	  AS APNONM
               ,#{SUPP_A}	  AS SUPP_A
               ,#{SUPP_B}	  AS SUPP_B
               ,#{SUPP_C}	  AS SUPP_C
               ,#{K_A}		  AS K_A
               ,#{K_B}		  AS K_B
               ,#{K_C}		  AS K_C
               ,#{PJ}		  AS PJ
               ,#{PJ_ETC}	  AS PJ_ETC
               ,TO_CHAR(TO_DATE(#{WRITE_DATE},'YYYY-MM-DD'), 'YYYYMMDD') AS WRITE_DATE
               ,#{DESCR}	  AS DESCR
               ,#{LOT_NO}	  AS LOT_NO
	           ,#{APRV_ITEM} AS APRV_ITEM
	           ,TO_CHAR(TO_DATE(#{SUBMIT_DAY},'YYYY-MM-DD'), 'YYYYMMDD') AS SUBMIT_DAY
	           ,#{ACCNO}	  AS ACCNO 
	      FROM DUAL) D
		ON (A.COMPANYCD		= D.COMPANYCD
			AND A.PLANT		= D.PLANT
			AND A.PARTNO	= D.APNO
			AND A.VENDCD	= D.VEND_CD
			AND A.BAL_NO	= D.BAL_NO    )
		WHEN MATCHED THEN
		    UPDATE SET  A.KINDCD          = D.KIND_CD
		    		   ,A.PARTNM          = D.APNONM
		    		   ,A.SUPP_A          = D.SUPP_A
		    		   ,A.SUPP_B          = D.SUPP_B
		    		   ,A.SUPP_C          = D.SUPP_C
		    		   ,A.K_A             = D.K_A
		    		   ,A.K_B             = D.K_B
		    		   ,A.K_C             = D.K_C
		    		   ,A.PJ              = D.PJ
		    		   ,A.PJ_ETC          = D.PJ_ETC 
		    		   ,A.WRITE_DATE      = D.WRITE_DATE
		    		   ,A.DESCR           = D.DESCR
		    		   ,A.LOT_NO          = D.LOT_NO
		    		   ,A.APRV_ITEM       = D.APRV_ITEM
		    		   ,A.SUBMIT_DAY      = D.SUBMIT_DAY
		    		   ,A.LOGIN_COMPANYCD = D.COMPANYCD
		    		   ,A.LOGIN_ID        = D.ACCNO
		    		   ,A.LOGIN_YMD       = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT (  A.COMPANYCD 
					, A.PLANT     
					, A.VENDCD    
					, A.PARTNO    
					, A.BAL_NO    
					, A.KINDCD    
					, A.PARTNM    
					, A.SUPP_A    
					, A.SUPP_B    
					, A.SUPP_C    
					, A.K_A       
					, A.K_B       
					, A.K_C       
					, A.PJ        
					, A.PJ_ETC    
					, A.WRITE_DATE
					, A.DESCR
					, A.LOT_NO
					, A.APRV_ITEM
					, A.SUBMIT_DAY
					, A.LOGIN_COMPANYCD
					, A.LOGIN_ID  
					, A.LOGIN_YMD 
		    		)
		    VALUES (  D.COMPANYCD
		    		, D.PLANT    
		    		, D.VEND_CD	
		    		, D.APNO
		    		, D.BAL_NO   
		    		, D.KIND_CD  
		    		, D.APNONM   
		    		, D.SUPP_A   
		    		, D.SUPP_B   
		    		, D.SUPP_C   
		    		, D.K_A      
		    		, D.K_B      
		    		, D.K_C      
		    		, D.PJ       
		    		, D.PJ_ETC   
		    		, D.WRITE_DATE
		    		, D.DESCR
		    		, D.LOT_NO
					, D.APRV_ITEM
					, D.SUBMIT_DAY
		    		, D.COMPANYCD
		    		, D.ACCNO
		    		, SYSDATE
		    )
	</update> 
	
	<!-- 수입검사 SKD 실적 저장 -->
	<update id="saveCmpltSkdRegistInfo" parameterType="hashmap">
		MERGE INTO Q_251_1 A USING(
	    SELECT  #{COMPANYCD}  AS COMPANYCD
               ,#{PLANT}	  AS PLANT
               ,#{APNO}		  AS APNO
               ,#{VEND_CD}	  AS VEND_CD
               ,#{BAL_NO}	  AS BAL_NO
               ,#{KIND_CD}	  AS KIND_CD
               ,#{APNONM}	  AS APNONM
               ,#{SUPP_A}	  AS SUPP_A
               ,#{SUPP_B}	  AS SUPP_B
               ,#{SUPP_C}	  AS SUPP_C
               ,#{K_A}		  AS K_A
               ,#{K_B}		  AS K_B
               ,#{K_C}		  AS K_C
               ,#{F_A}		  AS F_A
               ,#{F_B}		  AS F_B
               ,#{F_C}		  AS F_C
               ,#{PJ}		  AS PJ
               ,#{PJ_ETC}	  AS PJ_ETC
               ,TO_CHAR(TO_DATE(#{WRITE_DATE},'YYYY-MM-DD'), 'YYYYMMDD') AS WRITE_DATE
               ,#{DESCR}	  AS DESCR
               ,#{LOT_NO}	  AS LOT_NO
	           ,#{APRV_ITEM} AS APRV_ITEM
	           ,TO_CHAR(TO_DATE(#{SUBMIT_DAY},'YYYY-MM-DD'), 'YYYYMMDD') AS SUBMIT_DAY
	           ,#{ACCNO}	  AS ACCNO 
	      FROM DUAL) D
		ON (A.COMPANYCD		= D.COMPANYCD
			AND A.PLANT		= D.PLANT
			AND A.PARTNO	= D.APNO
			AND A.VENDCD	= D.VEND_CD
			AND A.BAL_NO	= D.BAL_NO    )
		WHEN MATCHED THEN
		    UPDATE SET  A.KINDCD          = D.KIND_CD
		    		   ,A.PARTNM          = D.APNONM
		    		   ,A.SUPP_A          = D.SUPP_A
		    		   ,A.SUPP_B          = D.SUPP_B
		    		   ,A.SUPP_C          = D.SUPP_C
		    		   ,A.K_A             = D.K_A
		    		   ,A.K_B             = D.K_B
		    		   ,A.K_C             = D.K_C
		    		   ,A.F_A             = D.F_A
		    		   ,A.F_B             = D.F_B
		    		   ,A.F_C             = D.F_C
		    		   ,A.PJ              = D.PJ
		    		   ,A.PJ_ETC          = D.PJ_ETC 
		    		   ,A.WRITE_DATE      = D.WRITE_DATE
		    		   ,A.DESCR           = D.DESCR
		    		   ,A.LOT_NO          = D.LOT_NO
		    		   ,A.APRV_ITEM       = D.APRV_ITEM
		    		   ,A.SUBMIT_DAY      = D.SUBMIT_DAY
		    		   ,A.LOGIN_COMPANYCD = D.COMPANYCD
		    		   ,A.LOGIN_ID        = D.ACCNO
		    		   ,A.LOGIN_YMD       = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT (  A.COMPANYCD 
					, A.PLANT     
					, A.VENDCD    
					, A.PARTNO    
					, A.BAL_NO    
					, A.KINDCD    
					, A.PARTNM    
					, A.SUPP_A    
					, A.SUPP_B    
					, A.SUPP_C    
					, A.K_A       
					, A.K_B       
					, A.K_C
					, A.F_A       
					, A.F_B       
					, A.F_C       
					, A.PJ        
					, A.PJ_ETC    
					, A.WRITE_DATE
					, A.DESCR
					, A.LOT_NO
					, A.APRV_ITEM
					, A.SUBMIT_DAY
					, A.LOGIN_COMPANYCD
					, A.LOGIN_ID  
					, A.LOGIN_YMD 
		    		)
		    VALUES (  D.COMPANYCD
		    		, D.PLANT    
		    		, D.VEND_CD	
		    		, D.APNO
		    		, D.BAL_NO   
		    		, D.KIND_CD  
		    		, D.APNONM   
		    		, D.SUPP_A   
		    		, D.SUPP_B   
		    		, D.SUPP_C   
		    		, D.K_A      
		    		, D.K_B      
		    		, D.K_C
		    		, D.F_A      
		    		, D.F_B      
		    		, D.F_C      
		    		, D.PJ       
		    		, D.PJ_ETC   
		    		, D.WRITE_DATE
		    		, D.DESCR
		    		, D.LOT_NO
					, D.APRV_ITEM
					, D.SUBMIT_DAY
		    		, D.COMPANYCD
		    		, D.ACCNO
		    		, SYSDATE
		    )
	</update> 
	
	<!-- 검사항목 저장 -->
	<update id="insertStdItemInfo" parameterType="json">
	    <selectKey resultType="string" keyProperty="SEQ" order="BEFORE">
			<choose>
				<when test="SEQ == '' or SEQ == null">
					SELECT NVL(MAX(A.SEQ), 0) + 1 AS SEQ
					  FROM Q_252 A
					 WHERE A.COMPANYCD = #{COMPANYCD}
					   AND A.PLANT     = #{PLANT}
					   AND A.PARTNO	   = #{APNO}
					   AND A.VENDCD    = #{VEND_CD}
					   AND A.REV_NO	   = #{REV_NO}
				</when>
				<otherwise>
					SELECT #{SEQ} FROM DUAL
				</otherwise>
			</choose> 
	    </selectKey>
		MERGE INTO Q_252 A USING(
		 SELECT  #{COMPANYCD}	 AS COMPANYCD
				,#{PLANT}		 AS PLANT
				,#{APNO}		 AS APNO
				,#{VEND_CD}		 AS VEND_CD
				,#{REV_NO}		 AS REV_NO
				,#{SEQ}			 AS SEQ
				,#{SNO}			 AS SNO
				,PREMIER_SYS.GET_ITGR_NAME_CODE(#{MGR_CLASS_NM}, '0000002193', #{LANG}) AS MGR_CLASS
				,#{ITEM}		 AS ITEM
				,#{STANDARD}	 AS STANDARD
				,#{MTH}			 AS MTH
				,#{SPEC_MAX}	 AS SPEC_MAX
				,#{SPEC_MIN}	 AS SPEC_MIN
				,#{ACCNO}		 AS ACCNO
				,#{SKD_GUBUN}	 AS SKD_GUBUN
				,#{INSP_QTY}	 AS INSP_QTY
		 FROM DUAL
	      ) D
		ON (A.COMPANYCD		= D.COMPANYCD
			AND A.PLANT		= D.PLANT
			AND A.PARTNO	= D.APNO
			AND A.VENDCD	= D.VEND_CD
			AND A.REV_NO	= D.REV_NO
			AND A.SEQ 		= D.SEQ)
		WHEN MATCHED THEN
		    UPDATE SET 	A.SNO			  = D.SNO,
			    		A.MGR_CLASS		  = D.MGR_CLASS,
		    			A.ITEM			  = D.ITEM,
			    		A.STANDARD		  = D.STANDARD ,
		    			A.MTH			  = D.MTH,
		    			A.SPEC_MIN		  = D.SPEC_MIN,
			    		A.SPEC_MAX		  = D.SPEC_MAX,
			    		A.SKD_GUBUN		  = D.SKD_GUBUN,
		    			A.LOGIN_COMPANYCD = D.COMPANYCD,
			    		A.LOGIN_ID        = D.ACCNO,
			    		A.LOGIN_YMD		  = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT ( A.COMPANYCD 
					,A.PLANT
					,A.PARTNO
					,A.VENDCD
					,A.REV_NO
					,A.SEQ
					,A.SNO
					,A.MGR_CLASS
					,A.ITEM
					,A.STANDARD
					,A.MTH
					,A.SPEC_MIN
					,A.SPEC_MAX
					,A.SKD_GUBUN
					,A.INSP_QTY
		    		,A.LOGIN_COMPANYCD 
		    		,A.LOGIN_ID
		    		,A.LOGIN_YMD
		    		)
		    VALUES ( D.COMPANYCD
		    		,D.PLANT
		    		,D.APNO
		    		,D.VEND_CD
		    		,D.REV_NO
		    		,D.SEQ
		    		,D.SNO
		    		,D.MGR_CLASS
		    		,D.ITEM
		    		,D.STANDARD
		    		,D.MTH
		    		,D.SPEC_MIN
		    		,D.SPEC_MAX
		    		,D.SKD_GUBUN
		    		,D.INSP_QTY
		    		,D.COMPANYCD 
		    		,D.ACCNO
		    		,SYSDATE
		    	   )
	</update>
	
	<!-- 실적등록 검사판정 저장 -->
	<update id="insertEstiItemInfo" parameterType="json">
		MERGE INTO Q_252_1 A USING(
		 SELECT  #{COMPANYCD} AS COMPANYCD
				,#{PLANT}	  AS PLANT  
				,#{VEND_CD}	  AS VEND_CD 
				,#{APNO}	  AS APNO 
				,#{REV_NO}	  AS REV_NO 
				,#{BAL_NO}	  AS BAL_NO
				,#{CAVITY_IDX}	  AS CAVITY 
				,#{SEQ}		  AS SEQ
				,#{SX1}		  AS SX1
				,#{SX2}		  AS SX2
				,#{SX3}		  AS SX3
				,#{SX4}		  AS SX4
				,#{SX5}		  AS SX5
				,#{CX1}		  AS CX1
				,#{CX2}		  AS CX2
				,#{CX3}		  AS CX3
				,#{CX4}		  AS CX4
				,#{CX5}		  AS CX5
				,#{SDECGBN}	  AS SDECGBN
				,#{CDECGBN}	  AS CDECGBN
				,#{ACCNO}	  AS ACCNO
		 FROM DUAL
	      ) D
		ON (A.COMPANYCD		= D.COMPANYCD
			AND A.PLANT 	= D.PLANT  
			AND A.VENDCD	= D.VEND_CD
			AND A.PARTNO	= D.APNO   
			AND A.REV_NO	= D.REV_NO 
			AND A.BAL_NO	= D.BAL_NO
			AND A.CAVITY	= D.CAVITY 
			AND A.SEQ		= D.SEQ	      
		   )
		WHEN MATCHED THEN
		    UPDATE SET 	 A.SX1			   = D.SX1
			    		,A.SX2			   = D.SX2
		    			,A.SX3			   = D.SX3
			    		,A.SX4			   = D.SX4
		    			,A.SX5			   = D.SX5
			    		,A.CX1			   = D.CX1
		    			,A.CX2			   = D.CX2
			    		,A.CX3			   = D.CX3
		    			,A.CX4			   = D.CX4
			    		,A.CX5			   = D.CX5
		    			,A.SDECGBN		   = D.SDECGBN
			    		,A.CDECGBN		   = D.CDECGBN
		    			,A.LOGIN_COMPANYCD = D.COMPANYCD
			    		,A.LOGIN_ID		   = D.ACCNO
			    		,A.LOGIN_YMD	   = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT ( A.COMPANYCD
					,A.PLANT
					,A.VENDCD
					,A.PARTNO
					,A.REV_NO
					,A.BAL_NO
					,A.CAVITY
					,A.SEQ
					,A.SX1
					,A.SX2
					,A.SX3
					,A.SX4
					,A.SX5
					,A.CX1
					,A.CX2
					,A.CX3
					,A.CX4
					,A.CX5
					,A.SDECGBN 
					,A.CDECGBN
		    		,A.LOGIN_COMPANYCD 
		    		,A.LOGIN_ID
		    		,A.LOGIN_YMD
		    		)
		    VALUES ( D.COMPANYCD
		    		,D.PLANT
		    		,D.VEND_CD
		    		,D.APNO
		    		,D.REV_NO
		    		,D.BAL_NO
		    		,D.CAVITY
		    		,D.SEQ
		    		,D.SX1
		    		,D.SX2
		    		,D.SX3
		    		,D.SX4
		    		,D.SX5
		    		,D.CX1
		    		,D.CX2
		    		,D.CX3
		    		,D.CX4
		    		,D.CX5
		    		,D.SDECGBN
		    		,D.CDECGBN
		    		,D.COMPANYCD
		    		,D.ACCNO
		    		,SYSDATE
		    	   )
	</update>
	
	<!-- 실적등록 SKD 검사판정 저장 -->
	<update id="insertEstiSkdItemInfo" parameterType="json">
		MERGE INTO Q_252_1 A USING(
		 SELECT  #{COMPANYCD} AS COMPANYCD
				,#{PLANT}	  AS PLANT  
				,#{VEND_CD}	  AS VEND_CD 
				,#{APNO}	  AS APNO 
				,#{REV_NO}	  AS REV_NO 
				,#{BAL_NO}	  AS BAL_NO
				,#{CAVITY_IDX}	  AS CAVITY 
				,#{SEQ}		  AS SEQ
				,#{SX1}		  AS SX1
				,#{SX2}		  AS SX2
				,#{SX3}		  AS SX3
				,#{SX4}		  AS SX4
				,#{SX5}		  AS SX5
				,#{CX1}		  AS CX1
				,#{CX2}		  AS CX2
				,#{CX3}		  AS CX3
				,#{CX4}		  AS CX4
				,#{CX5}		  AS CX5
				,#{FX1}		  AS FX1
				,#{FX2}		  AS FX2
				,#{FX3}		  AS FX3
				,#{FX4}		  AS FX4
				,#{FX5}		  AS FX5
				,#{SDECGBN}	  AS SDECGBN
				,#{CDECGBN}	  AS CDECGBN
				,#{FDECGBN}	  AS FDECGBN
				,#{ACCNO}	  AS ACCNO
		 FROM DUAL
	      ) D
		ON (A.COMPANYCD		= D.COMPANYCD
			AND A.PLANT 	= D.PLANT  
			AND A.VENDCD	= D.VEND_CD
			AND A.PARTNO	= D.APNO   
			AND A.REV_NO	= D.REV_NO 
			AND A.BAL_NO	= D.BAL_NO
			AND A.CAVITY	= D.CAVITY 
			AND A.SEQ		= D.SEQ	      
		   )
		WHEN MATCHED THEN
		    UPDATE SET 	 A.SX1			   = D.SX1
			    		,A.SX2			   = D.SX2
		    			,A.SX3			   = D.SX3
			    		,A.SX4			   = D.SX4
		    			,A.SX5			   = D.SX5
			    		,A.CX1			   = D.CX1
		    			,A.CX2			   = D.CX2
			    		,A.CX3			   = D.CX3
		    			,A.CX4			   = D.CX4
			    		,A.CX5			   = D.CX5
			    		,A.FX1			   = D.FX1
		    			,A.FX2			   = D.FX2
			    		,A.FX3			   = D.FX3
		    			,A.FX4			   = D.FX4
			    		,A.FX5			   = D.FX5
		    			,A.SDECGBN		   = D.SDECGBN
			    		,A.CDECGBN		   = D.CDECGBN
			    		,A.FDECGBN		   = D.FDECGBN
		    			,A.LOGIN_COMPANYCD = D.COMPANYCD
			    		,A.LOGIN_ID		   = D.ACCNO
			    		,A.LOGIN_YMD	   = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT ( A.COMPANYCD
					,A.PLANT
					,A.VENDCD
					,A.PARTNO
					,A.REV_NO
					,A.BAL_NO
					,A.CAVITY
					,A.SEQ
					,A.SX1
					,A.SX2
					,A.SX3
					,A.SX4
					,A.SX5
					,A.CX1
					,A.CX2
					,A.CX3
					,A.CX4
					,A.CX5
					,A.FX1
					,A.FX2
					,A.FX3
					,A.FX4
					,A.FX5
					,A.SDECGBN 
					,A.CDECGBN
					,A.FDECGBN
		    		,A.LOGIN_COMPANYCD 
		    		,A.LOGIN_ID
		    		,A.LOGIN_YMD
		    		)
		    VALUES ( D.COMPANYCD
		    		,D.PLANT
		    		,D.VEND_CD
		    		,D.APNO
		    		,D.REV_NO
		    		,D.BAL_NO
		    		,D.CAVITY
		    		,D.SEQ
		    		,D.SX1
		    		,D.SX2
		    		,D.SX3
		    		,D.SX4
		    		,D.SX5
		    		,D.CX1
		    		,D.CX2
		    		,D.CX3
		    		,D.CX4
		    		,D.CX5
		    		,D.FX1
		    		,D.FX2
		    		,D.FX3
		    		,D.FX4
		    		,D.FX5
		    		,D.SDECGBN
		    		,D.CDECGBN
		    		,D.FDECGBN
		    		,D.COMPANYCD
		    		,D.ACCNO
		    		,SYSDATE
		    	   )
	</update>
		
	<!-- 선정등록 선택 내용 저장 -->
	<update id="insertChkItemInfo" parameterType="json">
		MERGE INTO Q_610 A USING(
		 SELECT  #{COMPANYCD}	 AS COMPANYCD
				,#{PLANT}		 AS PLANT
				,#{VEND_CD}		 AS VEND_CD
				,#{APNO}		 AS APNO
				,#{REV_NO}		 AS REV_NO
				,#{value}		 AS EXAM_CD
				,#{content}		 AS DESCR
				,#{ACCNO}		 AS ACCNO
		 FROM DUAL
	      ) D
		ON (    A.COMPANYCD  = D.COMPANYCD
			AND A.PLANT      = D.PLANT    
			AND A.VENDCD     = D.VEND_CD	
			AND A.PARTNO     = D.APNO     
			AND A.REV_NO     = D.REV_NO
			AND A.EXAM_CD    = D.EXAM_CD   )
		WHEN MATCHED THEN
		    UPDATE SET 	A.DESCR			  = D.DESCR,
		    			A.LOGIN_COMPANYCD = D.COMPANYCD,
			    		A.LOGIN_ID        = D.ACCNO,
			    		A.LOGIN_YMD		  = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT ( A.COMPANYCD
					,A.PLANT    
					,A.VENDCD   
					,A.PARTNO   
					,A.REV_NO   
					,A.EXAM_CD  
					,A.DESCR
		    		,A.LOGIN_COMPANYCD 
		    		,A.LOGIN_ID
		    		,A.LOGIN_YMD
		    		)
		    VALUES ( D.COMPANYCD
		    		,D.PLANT    
		    		,D.VEND_CD	
		    		,D.APNO     
		    		,D.REV_NO   
		    		,D.EXAM_CD  
		    		,D.DESCR
		    		,D.COMPANYCD 
		    		,D.ACCNO
		    		,SYSDATE
		    	   )
	</update>
	
	<!-- 선정등록 선택 내용 저장 -->
	<update id="insertChkItemSkdInfo" parameterType="json">
		MERGE INTO Q_610_SKD A USING(
		 SELECT  #{COMPANYCD}	 AS COMPANYCD
				,#{PLANT}		 AS PLANT
				,#{VEND_CD}		 AS VEND_CD
				,#{APNO}		 AS APNO
				,#{REV_NO}		 AS REV_NO
				,#{value}		 AS EXAM_CD
				,#{content}		 AS DESCR
				,#{ACCNO}		 AS ACCNO
		 FROM DUAL
	      ) D
		ON (    A.COMPANYCD  = D.COMPANYCD
			AND A.PLANT      = D.PLANT    
			AND A.VENDCD     = D.VEND_CD	
			AND A.PARTNO     = D.APNO     
			AND A.REV_NO     = D.REV_NO
			AND A.EXAM_CD    = D.EXAM_CD   )
		WHEN MATCHED THEN
		    UPDATE SET 	A.DESCR			  = D.DESCR,
		    			A.LOGIN_COMPANYCD = D.COMPANYCD,
			    		A.LOGIN_ID        = D.ACCNO,
			    		A.LOGIN_YMD		  = SYSDATE
		WHEN NOT MATCHED THEN
		    INSERT ( A.COMPANYCD
					,A.PLANT    
					,A.VENDCD   
					,A.PARTNO   
					,A.REV_NO   
					,A.EXAM_CD  
					,A.DESCR
		    		,A.LOGIN_COMPANYCD 
		    		,A.LOGIN_ID
		    		,A.LOGIN_YMD
		    		)
		    VALUES ( D.COMPANYCD
		    		,D.PLANT    
		    		,D.VEND_CD	
		    		,D.APNO     
		    		,D.REV_NO   
		    		,D.EXAM_CD  
		    		,D.DESCR
		    		,D.COMPANYCD 
		    		,D.ACCNO
		    		,SYSDATE
		    	   )
	</update>
	
	<!-- 수입검사 선정등록(값) 정보 삭제  -->
	<delete id="deleteSelRegistInfo" parameterType="hashmap"> 
		DELETE FROM Q_615 A
		WHERE COMPANYCD = #{COMPANYCD}
		  AND PLANT     = #{PLANT}
		  AND PARTNO	= #{APNO}
		  AND VENDCD    = #{VEND_CD}
		  AND REV_NO	= #{REV_NO}
	</delete>
	
	<!-- 수입검사 선정등록(값) SKD 정보 삭제  -->
	<delete id="deleteSelSkdRegistInfo" parameterType="hashmap"> 
		DELETE FROM Q_615_SKD A
		WHERE COMPANYCD = #{COMPANYCD}
		  AND PLANT     = #{PLANT}
		  AND PARTNO	= #{APNO}
		  AND VENDCD    = #{VEND_CD}
		  AND REV_NO	= #{REV_NO}
	</delete>
	                    
	<!-- 수입검사 기준서(갑) 삭제  -->
	<delete id="deleteStdRegistInfo" parameterType="hashmap"> 
		DELETE FROM Q_251 A
		WHERE A.COMPANYCD = #{COMPANYCD}
		  AND A.PLANT	  = #{PLANT}
		  AND A.PARTNO	  = #{APNO}
		  AND A.VENDCD = #{VEND_CD}
		  AND A.REV_NO	  = #{REV_NO}
	</delete>
	                    
	<!-- 수입검사 실적정보(갑) 삭제  -->
	<delete id="deleteCmpltRegistInfo" parameterType="hashmap"> 
		DELETE FROM Q_251_1 
		WHERE COMPANYCD = #{COMPANYCD}
		  AND PLANT     = #{PLANT}
		  AND PARTNO	= #{APNO}
		  AND VENDCD    = #{VEND_CD}
		  AND BAL_NO	= #{BAL_NO}
	</delete>
	
	<!-- 수입검사 실적정보(을) 삭제  -->
	<delete id="deleteCmpltSubRegistInfo" parameterType="hashmap"> 
		DELETE FROM Q_252_1 
		WHERE COMPANYCD = #{COMPANYCD}
		  AND PLANT     = #{PLANT}
		  AND PARTNO	= #{APNO}
		  AND VENDCD    = #{VEND_CD}
		  AND BAL_NO	= #{BAL_NO}
	</delete>
	
	<!-- 수입검사 선정등록(을) 삭제  -->
	<delete id="deleteSelSubRegistInfo" parameterType="hashmap"> 
		DELETE FROM Q_610 
		WHERE COMPANYCD = #{COMPANYCD}
		  AND PLANT     = #{PLANT}
		  AND PARTNO	= #{APNO}
		  AND VENDCD    = #{VEND_CD}
	</delete>
	
	<!-- 수입검사 선정등록(을) SKD 삭제  -->
	<delete id="deleteSelSkdSubRegistInfo" parameterType="hashmap"> 
		DELETE FROM Q_610_SKD
		WHERE COMPANYCD = #{COMPANYCD}
		  AND PLANT     = #{PLANT}
		  AND PARTNO	= #{APNO}
		  AND VENDCD    = #{VEND_CD}
	</delete>
			
	<!-- 수입검사 기준서(을) 삭제 -->
	<delete id="deleteAllStdItemInfo" parameterType="hashmap"> 
		DELETE FROM Q_252 A
		WHERE A.COMPANYCD = #{COMPANYCD}
		  AND A.PLANT	  = #{PLANT}
		  AND A.PARTNO	  = #{APNO}
		  AND A.VENDCD    = #{VEND_CD}
		  AND A.REV_NO	  = #{REV_NO}
	</delete>
	
	<!-- 협력사 성적서 등록 목록 조회 -->
	<select id="getVendSungSearchList" parameterType="hashmap" resultType="hashmap">     	     
		SELECT ROWNUM AS RN, 
		       CASE WHEN X.PJ = '0000001757' THEN 'Y'
		            WHEN X.PJ = '0000001758' THEN 'N'
		       ELSE 'Z' END CHK_PJ,
		       NVL((SELECT SUM(CASE WHEN SDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_S
		            FROM V_Q_252_1
		            WHERE COMPANYCD = X.COMPANYCD
		            AND   PLANT = X.PLANT
		            AND   PARTNO = X.MATNR
		            AND   ISDAT = X.ISDAT
		            ),0) AS CHK_S,
		       NVL((SELECT SUM(CASE WHEN CDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_C
		            FROM V_Q_252_1
		            WHERE COMPANYCD = X.COMPANYCD
		            AND   PLANT = X.PLANT
		            AND   PARTNO = X.MATNR
		            AND   ISDAT = X.ISDAT
		            ),0) AS CHK_C,
		       X.*
		FROM (
		      SELECT PREMIER_SYS.GETCMPYNMBYCMPYSN(A.LIFNR) AS LIFNRNM,
		             GET_PART_NAME(A.COMPANYCD,A.MATNR) AS MATNRNM,
		             A.INSP_GUBUN AS GUIDELINE,
                 	 PREMIER_SYS.GET_ITGR_CODE_NAME(A.INSP_GUBUN, #{LANG}) AS GUIDELINENM,
		             (SELECT REV_NO FROM Q_251 X
		              WHERE COMPANYCD = A.COMPANYCD AND PLANT = A.PLANT AND VENDCD = A.LIFNR AND PARTNO = A.MATNR
		              AND   REV_NO = ( SELECT MAX(REV_NO)
		                               FROM Q_251
		                               WHERE COMPANYCD = X.COMPANYCD
		                               AND   PLANT = X.PLANT
		                               AND   VENDCD = X.VENDCD
		                               AND   PARTNO = X.PARTNO
		                               AND   SDATE <![CDATA[<=]]> A.ISDAT
		                             )) AS CHK_STANDARD,
		             B.KINDCD, C.PJ, A.*
		      FROM Q_9999 A, XM010 B, (SELECT * FROM Q_251_1) C
		      WHERE 1=1
		      AND   A.COMPANYCD = B.COMPANYCD
		      AND   A.MATNR = B.APNO
		      AND   A.COMPANYCD = C.COMPANYCD(+)
		      AND   A.PLANT = C.PLANT(+)
		      AND   A.LIFNR = C.VENDCD(+)
		      AND   A.MATNR = C.PARTNO(+)
		      AND   A.BARCO = C.BAL_NO(+)
		      AND   A.COMPANYCD = '0000000001'
		      <if test="CMPYSN != null and CMPYSN != ''">
		      AND   A.PLANT = #{CMPYSN}
		      </if>
		      AND   A.ISDAT BETWEEN REPLACE(#{SDATE},'-','') AND REPLACE(#{EDATE},'-','')
		      AND   A.SKD_GUBUN = 'NB'
		      <if test="VEND_CD != null and VEND_CD != ''">
		      AND   A.LIFNR = #{VEND_CD}
		      </if>
			  <if test="GUIDELINE != null and GUIDELINE != ''">
			  AND	A.INSP_GUBUN = #{GUIDELINE}
			  </if>
		      ORDER BY A.ISDAT DESC, A.ORDERNO, A.EBELN, A.EBELP
		     ) X
		WHERE 1=1
	</select>
	
	<!-- 포장장 성적서 등록 목록 조회 -->
	<select id="getVendPackSearchList" parameterType="hashmap" resultType="hashmap">     	     
		SELECT ROWNUM AS RN, 
		       CASE WHEN X.PJ = '0000001757' THEN 'Y'
		            WHEN X.PJ = '0000001758' THEN 'N'
		       ELSE 'Z' END CHK_PJ,
	           NVL((SELECT SUM(CASE WHEN SDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_S
	                FROM V_Q_252_1
	                WHERE COMPANYCD = X.COMPANYCD
	                AND   PLANT = X.SKD_PLANT
	                AND   PARTNO = X.MATNR
	                AND   ISDAT = X.ISDAT
	                ),0) AS CHK_S,
	           NVL((SELECT SUM(CASE WHEN CDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_C
	                FROM V_Q_252_1
	                WHERE COMPANYCD = X.COMPANYCD
	                AND   PLANT = X.SKD_PLANT
	                AND   PARTNO = X.MATNR
	                AND   ISDAT = X.ISDAT
	                ),0) AS CHK_C,
	           NVL((SELECT SUM(CASE WHEN FDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_F
	                FROM V_Q_252_1
	                WHERE COMPANYCD = X.COMPANYCD
	                AND   PLANT = X.SKD_PLANT
	                AND   PARTNO = X.MATNR
	                AND   ISDAT = X.ISDAT
	                ),0) AS CHK_F,
		       X.*
		FROM (
		      SELECT PREMIER_SYS.GETCMPYNMBYCMPYSN(A.LIFNR) AS LIFNRNM,
		      		 PREMIER_SYS.GET_PLANT_NAME_NEW(A.PLANT) AS PLANTNM,
             		 PREMIER_SYS.GET_PLANT_NAME_NEW(A.SKD_PLANT) AS SKD_PLANTNM,
		             GET_PART_NAME(A.COMPANYCD,A.MATNR) AS MATNRNM,
		             A.INSP_GUBUN AS GUIDELINE,
                 	 PREMIER_SYS.GET_ITGR_CODE_NAME(A.INSP_GUBUN, #{LANG}) AS GUIDELINENM,
		             (SELECT REV_NO FROM Q_251 X
		              WHERE COMPANYCD = A.COMPANYCD AND PLANT = A.SKD_PLANT AND VENDCD = A.LIFNR AND PARTNO = A.MATNR
		              AND   REV_NO = ( SELECT MAX(REV_NO)
		                               FROM Q_251
		                               WHERE COMPANYCD = X.COMPANYCD
		                               AND   PLANT = X.PLANT
		                               AND   VENDCD = X.VENDCD
		                               AND   PARTNO = X.PARTNO
		                               AND   SDATE <![CDATA[<=]]> A.ISDAT
		                             )) AS CHK_STANDARD,
		             B.KINDCD, C.PJ, A.*
		      FROM Q_9999 A, XM010 B, (SELECT * FROM Q_251_1) C
		      WHERE 1=1
		      AND   A.COMPANYCD = B.COMPANYCD
		      AND   A.MATNR = B.APNO
		      AND   A.COMPANYCD = C.COMPANYCD
		      AND   A.SKD_PLANT = C.PLANT
		      AND   A.LIFNR = C.VENDCD
		      AND   A.MATNR = C.PARTNO
		      AND   A.BARCO = C.BAL_NO
		      AND   A.COMPANYCD = #{COMPANYCD}
		      <if test="CMPYSN != null and CMPYSN != ''">
		      AND   A.SKD_PLANT = #{CMPYSN}
		      </if>
		      <if test="GUIDELINE != null and GUIDELINE != ''">
				AND	A.INSP_GUBUN = #{GUIDELINE}
				</if>
		      AND   A.ISDAT BETWEEN REPLACE(#{SDATE},'-','') AND REPLACE(#{EDATE},'-','')
		      AND   A.SKD_GUBUN = 'SKD'
		      ORDER BY A.ISDAT DESC, A.ORDERNO, A.EBELN, A.EBELP
		     ) X
		WHERE 1=1
	    AND   EXISTS ( SELECT 1 FROM V_Q_252_1 
	                   WHERE COMPANYCD = X.COMPANYCD AND PLANT = X.SKD_PLANT AND PARTNO = X.MATNR AND ISDAT = X.ISDAT )
		ORDER BY X.ISDAT DESC, X.PLANT, X.LIFNR, X.KINDCD, X.MATNR, X.SKD_PLANT   
	</select>
	
	<!-- 협력사 성적서 등록 SKD 목록 조회 -->
	<select id="getVendSungSkdSearchList" parameterType="hashmap" resultType="hashmap">     	     
		SELECT ROWNUM AS RN, 
		       CASE WHEN X.PJ = '0000001757' THEN 'Y'
		            WHEN X.PJ = '0000001758' THEN 'N'
		       ELSE 'Z' END CHK_PJ,
		       NVL((SELECT SUM(CASE WHEN SDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_S
		            FROM V_Q_252_1
		            WHERE COMPANYCD = X.COMPANYCD
		            AND   PLANT = X.SKD_PLANT
		            AND   PARTNO = X.MATNR
		            AND   ISDAT = X.ISDAT
		            ),0) AS CHK_S,
		       NVL((SELECT SUM(CASE WHEN CDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_C
		            FROM V_Q_252_1
		            WHERE COMPANYCD = X.COMPANYCD
		            AND   PLANT = X.SKD_PLANT
		            AND   PARTNO = X.MATNR
		            AND   ISDAT = X.ISDAT
		            ),0) AS CHK_C,
		       NVL((SELECT SUM(CASE WHEN FDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_F
		            FROM V_Q_252_1
		            WHERE COMPANYCD = X.COMPANYCD
		            AND   PLANT = X.SKD_PLANT
		            AND   PARTNO = X.MATNR
		            AND   ISDAT = X.ISDAT
		            ),0) AS CHK_F,
		       X.*
		FROM (
		      SELECT PREMIER_SYS.GETCMPYNMBYCMPYSN(A.LIFNR) AS LIFNRNM,
		      		 PREMIER_SYS.GET_PLANT_NAME_NEW(A.PLANT) AS PLANTNM,
             		 PREMIER_SYS.GET_PLANT_NAME_NEW(A.SKD_PLANT) AS SKD_PLANTNM,
		             GET_PART_NAME(A.COMPANYCD,A.MATNR) AS MATNRNM,
		             A.INSP_GUBUN AS GUIDELINE,
                 	 PREMIER_SYS.GET_ITGR_CODE_NAME(A.INSP_GUBUN, #{LANG}) AS GUIDELINENM,
		             (SELECT REV_NO FROM Q_251 X
		              WHERE COMPANYCD = A.COMPANYCD AND PLANT = A.SKD_PLANT AND VENDCD = A.LIFNR AND PARTNO = A.MATNR
		              AND   REV_NO = ( SELECT MAX(REV_NO)
		                               FROM Q_251
		                               WHERE COMPANYCD = X.COMPANYCD
		                               AND   PLANT = X.PLANT
		                               AND   VENDCD = X.VENDCD
		                               AND   PARTNO = X.PARTNO
		                               AND   SDATE <![CDATA[<=]]> A.ISDAT
		                             )) AS CHK_STANDARD,
		             B.KINDCD, C.PJ, A.*
		      FROM Q_9999 A, XM010 B, (SELECT * FROM Q_251_1) C
		      WHERE 1=1
		      AND   A.COMPANYCD = B.COMPANYCD
		      AND   A.MATNR = B.APNO
		      AND   A.COMPANYCD = C.COMPANYCD(+)
		      AND   A.SKD_PLANT = C.PLANT(+)
		      AND   A.LIFNR = C.VENDCD(+)
		      AND   A.MATNR = C.PARTNO(+)
		      AND   A.BARCO = C.BAL_NO(+)
		      AND   A.COMPANYCD = '0000000001'
		      <if test="CMPYSN != null and CMPYSN != ''">
		      AND   A.PLANT = #{CMPYSN}
		      </if>
		      AND   A.ISDAT BETWEEN REPLACE(#{SDATE},'-','') AND REPLACE(#{EDATE},'-','')
		      AND   A.SKD_GUBUN = 'SKD'
		      <if test="VEND_CD != null and VEND_CD != ''">
		      AND   A.LIFNR = #{VEND_CD}
		      </if>
		      <if test="GUIDELINE != null and GUIDELINE != ''">
			  AND	A.INSP_GUBUN = #{GUIDELINE}
			  </if>
		      ORDER BY A.ISDAT DESC, A.ORDERNO, A.EBELN, A.EBELP
		     ) X
		WHERE 1=1  
		ORDER BY X.ISDAT DESC, X.PLANT, X.LIFNR, X.KINDCD, X.MATNR, X.SKD_PLANT   
	</select>
	
	<!-- 수입검사 목록 조회 -->
	<select id="getVendIpgoSearchList" parameterType="hashmap" resultType="hashmap">     	     
		SELECT ROWNUM AS RN, 
		       CASE WHEN X.PJ = '0000001757' THEN 'Y'
		            WHEN X.PJ = '0000001758' THEN 'N'
		       ELSE 'Z' END CHK_PJ,
		       NVL((SELECT SUM(CASE WHEN SDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_S
		            FROM V_Q_252_1
		            WHERE COMPANYCD = X.COMPANYCD
		            AND   PLANT = X.PLANT
		            AND   PARTNO = X.MATNR
		            AND   ISDAT = X.ISDAT
		            ),0) AS CHK_S,
		       NVL((SELECT SUM(CASE WHEN CDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_C
		            FROM V_Q_252_1
		            WHERE COMPANYCD = X.COMPANYCD
		            AND   PLANT = X.PLANT
		            AND   PARTNO = X.MATNR
		            AND   ISDAT = X.ISDAT
		            ),0) AS CHK_C,
		       X.*
		FROM (
		      SELECT PREMIER_SYS.GETCMPYNMBYCMPYSN(A.LIFNR) AS LIFNRNM,
		             GET_PART_NAME(A.COMPANYCD,A.MATNR) AS MATNRNM,
		             A.INSP_GUBUN AS GUIDELINE,
                 	 PREMIER_SYS.GET_ITGR_CODE_NAME(A.INSP_GUBUN, #{LANG}) AS GUIDELINENM,
		             (SELECT REV_NO FROM Q_251 X
		              WHERE COMPANYCD = A.COMPANYCD AND PLANT = A.PLANT AND VENDCD = A.LIFNR AND PARTNO = A.MATNR
		              AND   REV_NO = ( SELECT MAX(REV_NO)
		                               FROM Q_251
		                               WHERE COMPANYCD = X.COMPANYCD
		                               AND   PLANT = X.PLANT
		                               AND   VENDCD = X.VENDCD
		                               AND   PARTNO = X.PARTNO
		                               AND   SDATE <![CDATA[<=]]> A.ISDAT
		                             )) AS CHK_STANDARD,
		             B.KINDCD, C.PJ, A.*
		      FROM Q_9999 A, XM010 B, (SELECT * FROM Q_251_1) C
		      WHERE 1=1
		      AND   A.COMPANYCD = B.COMPANYCD
		      AND   A.MATNR = B.APNO
		      AND   A.COMPANYCD = C.COMPANYCD(+)
		      AND   A.PLANT = C.PLANT(+)
		      AND   A.LIFNR = C.VENDCD(+)
		      AND   A.MATNR = C.PARTNO(+)
		      AND   A.BARCO = C.BAL_NO(+)
		      AND   A.COMPANYCD = #{COMPANYCD}
		      <if test="CMPYSN != null and CMPYSN != ''">
		      AND   A.PLANT = #{CMPYSN}
		      </if>
		      <if test="GUIDELINE != null and GUIDELINE != ''">
			  AND	A.INSP_GUBUN = #{GUIDELINE}
			  </if>
		      AND   A.ISDAT BETWEEN REPLACE(#{SDATE},'-','') AND REPLACE(#{EDATE},'-','')
		      AND   A.SKD_GUBUN = 'NB'
		      ORDER BY A.ISDAT DESC, A.ORDERNO, A.EBELN, A.EBELP
		     ) X
		WHERE 1=1
		AND   X.IS_STOCK IS NOT NULL
		<if test="SUBJECT != null and SUBJECT != ''">
		AND
		(
		  ((#{SUBJECT} = '0000003308') AND NOT EXISTS ( SELECT 1 FROM M_1120 WHERE COMPANYCD = X.COMPANYCD AND BARCO = X.BARCO )) OR
		  ((#{SUBJECT} = '0000003309') AND EXISTS ( SELECT 1 FROM M_1120 WHERE COMPANYCD = X.COMPANYCD AND BARCO = X.BARCO )) 
		)
		</if>
	</select> 	
	
	<!-- 수입검사 SKD 목록 조회 -->
	<select id="getVendIpgoSkdSearchList" parameterType="hashmap" resultType="hashmap">    
		SELECT Z.*
		FROM ( 	     
				SELECT ROWNUM AS RN, 
				       CASE WHEN X.PJ = '0000001757' THEN 'Y'
				            WHEN X.PJ = '0000001758' THEN 'N'
				       ELSE 'Z' END CHK_PJ,
				       W.DATE_PACK_CONT, W.CONT_NO, W.WERKS, W.SHIP_DAY,
			           NVL((SELECT SUM(CASE WHEN SDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_S
			                FROM V_Q_252_1
			                WHERE COMPANYCD = X.COMPANYCD
			                AND   PLANT = X.SKD_PLANT
			                AND   PARTNO = X.MATNR
			                AND   ISDAT = X.ISDAT
			                ),0) AS CHK_S,
			           NVL((SELECT SUM(CASE WHEN CDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_C
			                FROM V_Q_252_1
			                WHERE COMPANYCD = X.COMPANYCD
			                AND   PLANT = X.SKD_PLANT
			                AND   PARTNO = X.MATNR
			                AND   ISDAT = X.ISDAT
			                ),0) AS CHK_C,
			           NVL((SELECT SUM(CASE WHEN FDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_F
			                FROM V_Q_252_1
			                WHERE COMPANYCD = X.COMPANYCD
			                AND   PLANT = X.SKD_PLANT
			                AND   PARTNO = X.MATNR
			                AND   ISDAT = X.ISDAT
			                ),0) AS CHK_F,
				       X.*
				FROM (
				      SELECT PREMIER_SYS.GETCMPYNMBYCMPYSN(A.LIFNR) AS LIFNRNM,
				      		 PREMIER_SYS.GET_PLANT_NAME_NEW(A.PLANT) AS PLANTNM,
		             		 PREMIER_SYS.GET_PLANT_NAME_NEW(A.SKD_PLANT) AS SKD_PLANTNM,
				             GET_PART_NAME(A.COMPANYCD,A.MATNR) AS MATNRNM,
				             A.INSP_GUBUN AS GUIDELINE,
                 	 		 PREMIER_SYS.GET_ITGR_CODE_NAME(A.INSP_GUBUN, #{LANG}) AS GUIDELINENM,
				             (SELECT REV_NO FROM Q_251 X
				              WHERE COMPANYCD = A.COMPANYCD AND PLANT = A.SKD_PLANT AND VENDCD = A.LIFNR AND PARTNO = A.MATNR
				              AND   REV_NO = ( SELECT MAX(REV_NO)
				                               FROM Q_251
				                               WHERE COMPANYCD = X.COMPANYCD
				                               AND   PLANT = X.PLANT
				                               AND   VENDCD = X.VENDCD
				                               AND   PARTNO = X.PARTNO
				                               AND   SDATE <![CDATA[<=]]> A.ISDAT
				                             )) AS CHK_STANDARD,
				             B.KINDCD, C.PJ, A.*
				      FROM Q_9999 A, XM010 B, (SELECT * FROM Q_251_1) C
				      WHERE 1=1
				      AND   A.COMPANYCD = B.COMPANYCD
				      AND   A.MATNR = B.APNO
				      AND   A.COMPANYCD = C.COMPANYCD
				      AND   A.SKD_PLANT = C.PLANT
				      AND   A.LIFNR = C.VENDCD
				      AND   A.MATNR = C.PARTNO
				      AND   A.BARCO = C.BAL_NO
				      AND   A.COMPANYCD = #{COMPANYCD}
				      <if test="CMPYSN != null and CMPYSN != ''">
				      AND   A.SKD_PLANT = #{CMPYSN}
				      </if>
				      <if test="GUIDELINE != null and GUIDELINE != ''">
					  AND	A.INSP_GUBUN = #{GUIDELINE}
					  </if>
				      AND   A.ISDAT BETWEEN REPLACE(#{SDATE},'-','') AND REPLACE(#{EDATE},'-','')
				      AND   A.SKD_GUBUN = 'SKD'
				      ORDER BY A.ISDAT DESC, A.ORDERNO, A.EBELN, A.EBELP
				     ) X, V_ERP_TMP_INF_SPTR_NO_SKD W
				WHERE 1=1
			    AND   EXISTS ( SELECT 1 FROM V_Q_252_1 
			                   WHERE COMPANYCD = X.COMPANYCD AND PLANT = X.SKD_PLANT AND PARTNO = X.MATNR AND ISDAT = X.ISDAT )
				AND   X.PLANT = W.PLANT_CD(+)
		        AND   X.EBELN = W.EBELN(+)
		        AND   X.EBELP = W.EBELP(+)
		        AND   X.ORDERNO = W.SPTR_NO(+)
				<if test="SUBJECT != null and SUBJECT != ''">
				AND
				(
				  ((#{SUBJECT} = '0000003308') AND NOT EXISTS ( SELECT 1 FROM M_1120 WHERE COMPANYCD = X.COMPANYCD AND BARCO = X.BARCO )) OR
				  ((#{SUBJECT} = '0000003309') AND EXISTS ( SELECT 1 FROM M_1120 WHERE COMPANYCD = X.COMPANYCD AND BARCO = X.BARCO )) 
				)
				</if>
				ORDER BY X.ISDAT DESC, X.PLANT, X.LIFNR, X.KINDCD, X.MATNR, X.SKD_PLANT 
			) Z
		WHERE CHK_F > 0
	</select> 	
	
	<!-- 입고처리 저장 -->
	<update id="saveVendIpgoRgstInfo" parameterType="json">
		MERGE INTO M_1120 A USING (
		SELECT #{COMPANYCD} AS COMPANYCD
		      ,#{BARCO} AS BARCO
		      ,#{PLANT} AS PLANT
		      ,#{MATNR} AS MATNR
		      ,#{LIFNR} AS LIFNR
		      ,REPLACE(#{ISDAT},'-','') AS ISDAT
		      ,#{MENGE} AS MENGE
		      ,0 AS BAD_QTY
		      ,'A' AS INSP_RSLT
		      ,#{LOGIN_COMPANYCD} AS LOGIN_COMPANYCD
		      ,#{LOGIN_ID} AS LOGIN_ID
		      ,SYSDATE AS LOGIN_YMD
		FROM DUAL ) D
		ON (A.COMPANYCD = D.COMPANYCD
		AND A.BARCO = D.BARCO
		)
		WHEN MATCHED THEN
		  UPDATE SET A.PLANT = D.PLANT
		            ,A.MATNR = D.MATNR
		            ,A.LIFNR = D.LIFNR
		            ,A.ISDAT = D.ISDAT
		            ,A.MENGE = D.MENGE
		            ,A.BAD_QTY = D.BAD_QTY
		            ,A.INSP_RSLT = D.INSP_RSLT
		            ,A.LOGIN_COMPANYCD = D.LOGIN_COMPANYCD
		            ,A.LOGIN_ID = D.LOGIN_ID
		            ,A.LOGIN_YMD = D.LOGIN_YMD
		WHEN NOT MATCHED THEN
		INSERT(A.COMPANYCD, A.BARCO, A.PLANT, A.MATNR, A.LIFNR, A.ISDAT, A.MENGE, A.BAD_QTY, A.INSP_RSLT, A.LOGIN_COMPANYCD, A.LOGIN_ID, A.LOGIN_YMD)
		VALUES(D.COMPANYCD, D.BARCO, D.PLANT, D.MATNR, D.LIFNR, D.ISDAT, D.MENGE, D.BAD_QTY, D.INSP_RSLT, D.LOGIN_COMPANYCD, D.LOGIN_ID, D.LOGIN_YMD)
	</update>
	
	<!-- 입하대기 목록 조회 -->
	<select id="getVendIphaSearchList" parameterType="hashmap" resultType="hashmap">     	     
		SELECT ROWNUM AS RN, 
		       CASE WHEN X.PJ = '0000001757' THEN 'Y'
		            WHEN X.PJ = '0000001758' THEN 'N'
		       ELSE 'Z' END CHK_PJ,
		       NVL((SELECT SUM(CASE WHEN SDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_S
		            FROM V_Q_252_1
		            WHERE COMPANYCD = X.COMPANYCD
		            AND   PLANT = X.PLANT
		            AND   PARTNO = X.MATNR
		            AND   ISDAT = X.ISDAT
		            ),0) AS CHK_S,
		       NVL((SELECT SUM(CASE WHEN CDECGBN IS NOT NULL THEN 1 ELSE 0 END) CHK_C
		            FROM V_Q_252_1
		            WHERE COMPANYCD = X.COMPANYCD
		            AND   PLANT = X.PLANT
		            AND   PARTNO = X.MATNR
		            AND   ISDAT = X.ISDAT
		            ),0) AS CHK_C,
		       X.*
		FROM (
		      SELECT PREMIER_SYS.GETCMPYNMBYCMPYSN(A.LIFNR) AS LIFNRNM,
		             GET_PART_NAME(A.COMPANYCD,A.MATNR) AS MATNRNM,
		             A.INSP_GUBUN AS GUIDELINE,
                 	 PREMIER_SYS.GET_ITGR_CODE_NAME(A.INSP_GUBUN, #{LANG}) AS GUIDELINENM,
		             (SELECT REV_NO FROM Q_251 X
		              WHERE COMPANYCD = A.COMPANYCD AND PLANT = A.PLANT AND VENDCD = A.LIFNR AND PARTNO = A.MATNR
		              AND   REV_NO = ( SELECT MAX(REV_NO)
		                               FROM Q_251
		                               WHERE COMPANYCD = X.COMPANYCD
		                               AND   PLANT = X.PLANT
		                               AND   VENDCD = X.VENDCD
		                               AND   PARTNO = X.PARTNO
		                               AND   SDATE <![CDATA[<=]]> A.ISDAT
		                             )) AS CHK_STANDARD,
		             B.KINDCD, C.PJ, A.*
		      FROM Q_9999 A, XM010 B, (SELECT * FROM Q_251_1) C
		      WHERE 1=1
		      AND   A.COMPANYCD = B.COMPANYCD
		      AND   A.MATNR = B.APNO
		      AND   A.COMPANYCD = C.COMPANYCD(+)
		      AND   A.PLANT = C.PLANT(+)
		      AND   A.LIFNR = C.VENDCD(+)
		      AND   A.MATNR = C.PARTNO(+)
		      AND   A.BARCO = C.BAL_NO(+)
		      AND   A.COMPANYCD = #{COMPANYCD}
		      <if test="CMPYSN != null and CMPYSN != ''">
		      AND   A.PLANT = #{CMPYSN}
		      </if>
		      <if test="GUIDELINE != null and GUIDELINE != ''">
			  AND	A.INSP_GUBUN = #{GUIDELINE}
			  </if>
		      AND   A.ISDAT BETWEEN REPLACE(#{SDATE},'-','') AND REPLACE(#{EDATE},'-','')
		      AND   A.SKD_GUBUN = 'NB'
		      ORDER BY A.ISDAT DESC, A.ORDERNO, A.EBELN, A.EBELP
		     ) X
		WHERE 1=1  
		AND   X.IS_STOCK IS NULL 
	</select>
	
	<!-- 입하처리 저장 -->
	<update id="saveVendIphaRgstInfo" parameterType="json">
		UPDATE Q_9999
		SET IS_STOCK = 'Y', 
		    STOCK_DATE = SYSDATE, 
		    STOCK_GUBUN = '2', 
		    STOCK_PLANT = #{LOGIN_COMPANYCD}, 
		    STOCK_ID = #{LOGIN_ID}
		WHERE COMPANYCD = #{COMPANYCD}
		AND   BARCO = #{BARCO}
	</update>
	
	<!-- 수입검사 현황 목록 조회  -->
	<select id="selectIpgoGubunList" parameterType="json" resultType="json">
		SELECT NVL(B.T_CNT,0) AS T_CNT, 
		       NVL(B.Y_CNT,0) AS Y_CNT, NVL(B.Y_RATE,0) AS Y_RATE, NVL(B.Y_I_CNT,0) AS Y_I_CNT, NVL(B.Y_I_RATE,0) AS Y_I_RATE,
		       NVL(B.N_CNT,0) AS N_CNT, NVL(B.N_RATE,0) AS N_RATE, NVL(B.N_I_CNT,0) AS N_I_CNT, NVL(B.N_I_RATE,0) AS N_I_RATE,
		       A.*
		FROM COM_PLANT_INFO A, (SELECT RETURN_RATE_ACHIEV(F.T_CNT,F.Y_CNT) AS Y_RATE,
		                               RETURN_RATE_ACHIEV(F.T_CNT,F.N_CNT) AS N_RATE,
		                               RETURN_RATE_ACHIEV(F.Y_CNT,F.Y_I_CNT) AS Y_I_RATE,
		                               RETURN_RATE_ACHIEV(F.N_CNT,F.N_I_CNT) AS N_I_RATE,
		                               F.*
		                        FROM (
		                              SELECT Z.PLANT, 
		                                     COUNT(*) AS T_CNT,
		                                     SUM(DECODE(Z.G_GUBUN,'Y',1,0)) AS Y_CNT,
		                                     SUM(DECODE(Z.G_GUBUN,'N',1,0)) AS N_CNT,
		                                     SUM(DECODE(Z.G_GUBUN,'Y',IPGO_CNT,0)) AS Y_I_CNT,
		                                     SUM(DECODE(Z.G_GUBUN,'N',IPGO_CNT,0)) AS N_I_CNT  
		                              FROM (
		                                    SELECT DECODE(X.SKD_GUBUN,'SKD',X.SKD_PLANT,X.PLANT) AS PLANT,
		                                           DECODE(Y.COMPANYCD,NULL,0,1) AS IPGO_CNT,
		                                           DECODE(GET_GUIDELINE_CODE(X.SKD_GUBUN, X.COMPANYCD, DECODE(X.SKD_GUBUN,'SKD',X.SKD_PLANT,X.PLANT), X.LIFNR, X.MATNR, X.ISDAT),NULL,'N','Y') AS G_GUBUN
		                                    FROM Q_9999 X, M_1120 Y
		                                    WHERE 1=1
		                                    AND   X.COMPANYCD = Y.COMPANYCD(+)
		                                    AND   X.BARCO = Y.BARCO(+)
		                                    AND   X.COMPANYCD = '0000000001'
		                                    AND   X.ISDAT BETWEEN REPLACE(#{SDATE},'-','') AND REPLACE(#{EDATE},'-','')
		                                   ) Z
		                              WHERE 1=1
		                              GROUP BY Z.PLANT
		                             ) F
		                       ) B
		WHERE 1=1
		AND   A.PLANT_CD = B.PLANT(+)
		AND   A.CMPY_SN = '0000000001'
		AND   A.PLANT_CD NOT IN ('1350')
		<if test="CMPYSN != null and CMPYSN != ''">
		AND   A.PLANT_CD = #{CMPYSN}
		</if>
		ORDER BY A.PLANT_CD
	</select>
	
	<update id="saveErpRegistInfo" parameterType="json" statementType="CALLABLE">
      {
         call PREMIER_SYS.BATCH_ERP_IF_SUNG(#{COMPANYCD, mode=IN, jdbcType=VARCHAR},#{BAL_NO, mode=IN, jdbcType=VARCHAR},#{ACCNO, mode=IN, jdbcType=VARCHAR},'1',#{RESULT, mode=OUT, jdbcType=VARCHAR})
      }
   </update>
   
   <!-- 수입검사 - 성적서등록 체크 -->
	<select id="BalnoRegiChk" parameterType="hashmap" resultType="json">
		SELECT *
		FROM Q_251_1
		WHERE COMPANYCD = #{COMPANYCD}
		AND   BAL_NO = #{BAL_NO}
		AND   ROWNUM = 1
	</select>
	
	<!-- 수입검사 - 기존 성적서등록 체크 -->
	<select id="SungRegiChk" parameterType="hashmap" resultType="json">
		SELECT *
		FROM V_Q_252_1 A
		WHERE 1=1
		AND   EXISTS ( SELECT 1 FROM Q_9999 
		               WHERE COMPANYCD = #{COMPANYCD} AND BARCO = #{BAL_NO}
		               AND   COMPANYCD = A.COMPANYCD AND DECODE(SKD_GUBUN,'SKD',SKD_PLANT,PLANT) = A.PLANT AND MATNR = A.PARTNO AND ISDAT = A.ISDAT
		             )
		AND   ROWNUM = 1
	</select>
	
	<!-- 수입검사 이력현황 Master 목록 조회  -->
	<select id="getIncomHistMList" parameterType="json" resultType="json">
		SELECT ROWNUM RNO, A.*
		FROM (
		      SELECT COMPANYCD, PLANT, VENDCD, PARTNO,
		             PREMIER_SYS.GET_PLANT_NAME_NEW(PLANT) AS PLANTNM,
		             PREMIER_SYS.GETCMPYNMBYCMPYSN(VENDCD) AS VENDNM
		      FROM Q_615 
		      WHERE 1=1
		      AND   COMPANYCD = #{COMPANYCD}
		      <if test="PLANT != null and PLANT != ''">
		      AND   PLANT = #{PLANT}
		      </if>
		      <if test="VEND_CD != null and VEND_CD != ''">
		      AND   VENDCD = #{VEND_CD}
		      </if>
		      GROUP BY COMPANYCD, PLANT, VENDCD, PARTNO
		      ORDER BY COMPANYCD, PLANT, VENDCD, PARTNO
		     ) A
	</select>
	
	<!-- 수입검사 이력현황 Detail 목록 조회  -->
	<select id="getIncomHistDList" parameterType="json" resultType="json">
		SELECT PREMIER_SYS.GET_ITGR_CODE_NAME(GUIDELINE, #{LANG}) AS GUIDELINENM,
		       PREMIER_SYS.GET_ITGR_CODE_NAME(REASON, #{LANG}) AS REASONNM,
		       A.*
		FROM Q_615 A
		WHERE 1=1
		AND   COMPANYCD = #{COMPANYCD}
		AND   PLANT = #{PLANT}
		AND   VENDCD = #{VENDCD}
		AND   PARTNO = #{PARTNO}
		ORDER BY REV_NO DESC
	</select>

</mapper>