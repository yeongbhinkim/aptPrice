<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dbvalley.premier.qms.prodquality.mapper.PrvntMgmtMapper"> 
	<!-- 예방관리 목록 조회 --> 
	<select id="selectPreventionList" parameterType="json" resultType="json">
		SELECT ROWNUM AS RNO, B.*
		     , GET_ITGR_CODE_NAME(B.PART_GROUP, #{lang}) PART_GROUPNM
		     , GET_ITGR_CODE_NAME(B.JUGI, #{lang}) JUGI_NM
		FROM (    SELECT 
					   A.Q_586_SEQ	
					  ,A.COMPANYCD
		              ,A.PLANT
		              ,A.YY 
		              ,A.MGT_1
		              ,A.MGT_3
		              ,A.KINDCD
		              ,A.PART_GROUP
		              ,A.JUGI
		              ,A.DESCR
		              ,MAX(DECODE(A.M01,'Y',DECODE(B.MM,'01',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M01
		              ,MAX(DECODE(A.M02,'Y',DECODE(B.MM,'02',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M02
		              ,MAX(DECODE(A.M03,'Y',DECODE(B.MM,'03',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M03
		              ,MAX(DECODE(A.M04,'Y',DECODE(B.MM,'04',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M04
		              ,MAX(DECODE(A.M05,'Y',DECODE(B.MM,'05',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M05
		              ,MAX(DECODE(A.M06,'Y',DECODE(B.MM,'06',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M06
		              ,MAX(DECODE(A.M07,'Y',DECODE(B.MM,'07',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M07
		              ,MAX(DECODE(A.M08,'Y',DECODE(B.MM,'08',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M08
		              ,MAX(DECODE(A.M09,'Y',DECODE(B.MM,'09',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M09
		              ,MAX(DECODE(A.M10,'Y',DECODE(B.MM,'10',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M10
		              ,MAX(DECODE(A.M11,'Y',DECODE(B.MM,'11',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M11
		              ,MAX(DECODE(A.M12,'Y',DECODE(B.MM,'12',DECODE(GET_SIGNTYPECD('QMS_Q_596', B.Q_596_SEQ),'C',DECODE(B.JUDGE,'0000001757','3','4'),'2'),'1'),NULL)) M12
		          FROM Q_586_NEW A, (SELECT MAX(Q_596_SEQ) KEEP(DENSE_RANK FIRST ORDER BY JUDGE_DATE DESC) AS Q_596_SEQ,
		                                	MAX(Q_586_SEQ) KEEP(DENSE_RANK FIRST ORDER BY JUDGE_DATE DESC) AS Q_586_SEQ,
		                                MAX(JUDGE) KEEP(DENSE_RANK FIRST ORDER BY JUDGE_DATE DESC) AS JUDGE,
		                                MAX(SUBSTR(JUDGE_DATE,5,2)) KEEP(DENSE_RANK FIRST ORDER BY JUDGE_DATE DESC) AS MM
		                           FROM Q_596_NEW 
		                          GROUP BY SUBSTR(JUDGE_DATE,5,2) ) B
		         WHERE A.COMPANYCD = '0000000001'
		           AND A.YY     = #{YY}
		           AND A.PLANT  = #{PLANT}
		           AND A.KINDCD LIKE #{KINDCD}||'%'
		           AND A.Q_586_SEQ = B.Q_586_SEQ(+)
		         GROUP BY A.Q_586_SEQ
		         		 ,A.COMPANYCD
		                 ,A.PLANT
		                 ,A.YY 
		                 ,A.MGT_1
		                 ,A.MGT_3
		                 ,A.KINDCD
		                 ,A.PART_GROUP
		                 ,A.JUGI
		                 ,A.DESCR 
		         ORDER BY 1,4,2,5 ) B
	</select>
	
	<!-- 예방관리 계획 상세 조회 -->
	<select id="selectPreventionDetail" parameterType="json" resultType="json">
		SELECT A.*
			 , GET_PLANT_NAME(#{COMPANYCD},A.PLANT) AS PLANT_NM
			 , GET_ITGR_CODE_NAME(A.PART_GROUP, #{lang}) PART_GROUPNM
		     , GET_ITGR_CODE_NAME(A.JUGI, #{lang}) JUGI_NM
		  FROM Q_586_NEW A
		 WHERE A.Q_586_SEQ = #{Q_586_SEQ}
	</select>
	
	<!-- 예방관리 실적 상세 조회 -->
	<select id="selectPreventionResult" parameterType="json" resultType="json">
		SELECT A.Q_586_SEQ, A.COMPANYCD, A.PLANT, A.YY, A.MGT_1, A.MGT_3, A.KINDCD, A.PART_GROUP
		     , B.Q_596_SEQ, B.JUDGE, B.JUDGE_ACC_NO, B.JUDGE_RMK
		     , GET_PLANT_NAME(#{COMPANYCD}, A.PLANT) AS PLANT_NM
		     , GET_ITGR_CODE_NAME(A.PART_GROUP, 'KOR') PART_GROUPNM
		     , GET_ITGR_CODE_NAME(A.JUGI, 'KOR') JUGI_NM
		     , TO_CHAR(TO_DATE(B.JUDGE_DATE,'YYYYmmDD'),'YYYY-mm-DD') JUDGE_DATE
		     , GETNAMEBYACCNO(B.JUDGE_ACC_NO) JUDGE_ACC_NM
		     , GET_SIGNTYPECD('QMS_Q_596',B.Q_596_SEQ) AS SIGNTYPECD
		 FROM Q_586_NEW A, 
		 	  (SELECT * FROM Q_596_NEW
		 	    WHERE Q_586_SEQ = #{Q_586_SEQ} 
				 AND TO_CHAR(TO_DATE(JUDGE_DATE,'yyyyMMdd'),'MM') = #{MM} ) B
		 WHERE A.Q_586_SEQ = B.Q_586_SEQ(+)
		   AND A.Q_586_SEQ = #{Q_586_SEQ}
	</select>
	
	<!-- 예방관리 계획복사 -->
	<update id="mergePreventionPlan" parameterType="json">	
		MERGE INTO Q_586_NEW A USING (
			SELECT SEQ_Q_586.NEXTVAL AS Q_586_SEQ, COMPANYCD, PLANT, #{OBJ_YY} AS YY, MGT_1, MGT_3, KINDCD, PART_GROUP, JUGI, M01, M02, M03, M04, M05, M06, M07, M08, M09, M10, M11, M12, DESCR
				 , #{LOGIN_COMPANYCD} AS LOGIN_COMPANYCD
			     , #{LOGIN_ID} AS LOGIN_ID
			     , TO_CHAR(SYSDATE,'YYYYMMDD') AS LOGIN_YMD
			  FROM Q_586_NEW
			 WHERE COMPANYCD = #{COMPANYCD}
			   AND PLANT = #{PLANT}
			   AND YY = #{SRC_YY}
			   AND KINDCD LIKE #{KINDCD}||'%'
		) D
		ON (A.Q_586_SEQ = D.Q_586_SEQ )
		WHEN MATCHED THEN
		  UPDATE SET A.COMPANYCD = D.COMPANYCD
		  			,A.PLANT = D.PLANT
		  			,A.YY = D.YY
		  			,A.MGT_1 = D.MGT_1
		  			,A.MGT_3 = D.MGT_3
		  			,A.KINDCD = D.KINDCD
		  			,A.PART_GROUP = D.PART_GROUP
		  			,A.JUGI = D.JUGI
		            ,A.M01 = D.M01
		            ,A.M02 = D.M02
		            ,A.M03 = D.M03
		            ,A.M04 = D.M04
		            ,A.M05 = D.M05
		            ,A.M06 = D.M06
		            ,A.M07 = D.M07
		            ,A.M08 = D.M08
		            ,A.M09 = D.M09
		            ,A.M10 = D.M10
		            ,A.M11 = D.M11
		            ,A.M12 = D.M12
		            ,A.DESCR = D.DESCR
		            ,A.LOGIN_COMPANYCD = D.LOGIN_COMPANYCD
		            ,A.LOGIN_ID = D.LOGIN_ID
		            ,A.LOGIN_YMD = D.LOGIN_YMD
		WHEN NOT MATCHED THEN
		INSERT(A.Q_586_SEQ, A.COMPANYCD, A.PLANT, A.YY, A.MGT_1, A.MGT_3, A.KINDCD, A.PART_GROUP, A.JUGI, A.M01, A.M02, A.M03, A.M04, A.M05, A.M06, A.M07, A.M08, A.M09, A.M10, A.M11, A.M12, A.DESCR, A.LOGIN_COMPANYCD, A.LOGIN_ID, A.LOGIN_YMD)
		VALUES(D.Q_586_SEQ, D.COMPANYCD, D.PLANT, D.YY, D.MGT_1, D.MGT_3, D.KINDCD, D.PART_GROUP, D.JUGI, D.M01, D.M02, D.M03, D.M04, D.M05, D.M06, D.M07, D.M08, D.M09, D.M10, D.M11, D.M12, D.DESCR, D.LOGIN_COMPANYCD, D.LOGIN_ID, D.LOGIN_YMD)
			
	</update>
	<!-- 예방관리 계획 상세 저장 -->
	<update id="mergePreventionDetail" parameterType="json">
		<selectKey resultType="string" keyProperty="Q_586_SEQ" order="BEFORE">
			<choose>
				<when test="Q_586_SEQ != null and Q_586_SEQ != ''">
			SELECT #{Q_586_SEQ} AS Q_586_SEQ FROM DUAL	
				</when>
				<otherwise>
			SELECT SEQ_Q_586.NEXTVAL FROM DUAL	
				</otherwise>
			</choose>
        </selectKey>
		MERGE INTO Q_586_NEW A USING (
		SELECT #{Q_586_SEQ} AS Q_586_SEQ
			  ,#{COMPANYCD} AS COMPANYCD
		      ,#{PLANT} AS PLANT
		      ,#{YY} AS YY
		      ,#{MGT_1} AS MGT_1
		      ,#{MGT_3} AS MGT_3
		      ,#{KINDCD} AS KINDCD
		      ,#{JUGI} AS JUGI
		      ,#{PART_GROUP} AS PART_GROUP
		      ,#{M01} AS M01
		      ,#{M02} AS M02
		      ,#{M03} AS M03
		      ,#{M04} AS M04
		      ,#{M05} AS M05
		      ,#{M06} AS M06
		      ,#{M07} AS M07
		      ,#{M08} AS M08
		      ,#{M09} AS M09
		      ,#{M10} AS M10
		      ,#{M11} AS M11
		      ,#{M12} AS M12
		      ,#{DESCR} AS DESCR
		      ,#{LOGIN_COMPANYCD} AS LOGIN_COMPANYCD
		      ,#{LOGIN_ID} AS LOGIN_ID
		      ,TO_CHAR(SYSDATE,'YYYYmmDD') AS LOGIN_YMD
		FROM DUAL ) D
		ON (A.Q_586_SEQ = D.Q_586_SEQ)
		WHEN MATCHED THEN
		  UPDATE SET A.COMPANYCD = D.COMPANYCD
		  			,A.PLANT = D.PLANT
		  			,A.YY = D.YY
		  			,A.MGT_1 = D.MGT_1
		  			,A.MGT_3 = D.MGT_3
		  			,A.KINDCD = D.KINDCD
		  			,A.PART_GROUP = D.PART_GROUP
		  			,A.JUGI = D.JUGI
		            ,A.M01 = D.M01
		            ,A.M02 = D.M02
		            ,A.M03 = D.M03
		            ,A.M04 = D.M04
		            ,A.M05 = D.M05
		            ,A.M06 = D.M06
		            ,A.M07 = D.M07
		            ,A.M08 = D.M08
		            ,A.M09 = D.M09
		            ,A.M10 = D.M10
		            ,A.M11 = D.M11
		            ,A.M12 = D.M12
		            ,A.DESCR = D.DESCR
		            ,A.LOGIN_COMPANYCD = D.LOGIN_COMPANYCD
		            ,A.LOGIN_ID = D.LOGIN_ID
		            ,A.LOGIN_YMD = D.LOGIN_YMD
		WHEN NOT MATCHED THEN
		INSERT(A.Q_586_SEQ, A.COMPANYCD, A.PLANT, A.YY, A.MGT_1, A.MGT_3, A.KINDCD, A.PART_GROUP, A.JUGI, A.M01, A.M02, A.M03, A.M04, A.M05, A.M06, A.M07, A.M08, A.M09, A.M10, A.M11, A.M12, A.DESCR, A.LOGIN_COMPANYCD, A.LOGIN_ID, A.LOGIN_YMD)
		VALUES(D.Q_586_SEQ, D.COMPANYCD, D.PLANT, D.YY, D.MGT_1, D.MGT_3, D.KINDCD, D.PART_GROUP, D.JUGI, D.M01, D.M02, D.M03, D.M04, D.M05, D.M06, D.M07, D.M08, D.M09, D.M10, D.M11, D.M12, D.DESCR, D.LOGIN_COMPANYCD, D.LOGIN_ID, D.LOGIN_YMD)
			
	</update>
	<!-- 예방관리 실적 상세 저장 -->
	<update id="mergePreventionResult" parameterType="json">
		<selectKey resultType="string" keyProperty="Q_596_SEQ" order="BEFORE">
			<choose>
				<when test="Q_596_SEQ != null and Q_596_SEQ != ''">
			SELECT #{Q_596_SEQ} AS Q_596_SEQ FROM DUAL	
				</when>
				<otherwise>
			SELECT SEQ_Q_596.NEXTVAL FROM DUAL	
				</otherwise>
			</choose>
        </selectKey>
		MERGE INTO Q_596_NEW A USING (
		SELECT #{Q_596_SEQ} AS Q_596_SEQ
			  ,#{Q_586_SEQ} AS Q_586_SEQ
		      ,REPLACE(#{JUDGE_DATE},'-','') AS JUDGE_DATE
		      ,#{JUDGE} AS JUDGE
		      ,#{JUDGE_ACC_NO} AS JUDGE_ACC_NO
		      ,#{JUDGE_RMK} AS JUDGE_RMK
		      ,#{LOGIN_COMPANYCD} AS LOGIN_COMPANYCD
		      ,#{LOGIN_ID} AS LOGIN_ID
		      ,TO_CHAR(SYSDATE,'YYYYmmDD') AS LOGIN_YMD
		FROM DUAL ) D
		ON (A.Q_596_SEQ = D.Q_596_SEQ
		)
		WHEN MATCHED THEN
		  UPDATE SET A.Q_586_SEQ = D.Q_586_SEQ
		            ,A.JUDGE_DATE = D.JUDGE_DATE
		            ,A.JUDGE = D.JUDGE
		            ,A.JUDGE_ACC_NO = D.JUDGE_ACC_NO
		            ,A.JUDGE_RMK = D.JUDGE_RMK
		            ,A.LOGIN_COMPANYCD = D.LOGIN_COMPANYCD
		            ,A.LOGIN_ID = D.LOGIN_ID
		            ,A.LOGIN_YMD = D.LOGIN_YMD
		WHEN NOT MATCHED THEN
		INSERT(A.Q_596_SEQ, A.Q_586_SEQ, A.JUDGE_DATE, A.JUDGE, A.JUDGE_ACC_NO, A.JUDGE_RMK, A.LOGIN_COMPANYCD, A.LOGIN_ID, A.LOGIN_YMD)
		VALUES(D.Q_596_SEQ, D.Q_586_SEQ, D.JUDGE_DATE, D.JUDGE, D.JUDGE_ACC_NO, D.JUDGE_RMK, D.LOGIN_COMPANYCD, D.LOGIN_ID, D.LOGIN_YMD)
				
	</update>
	
	<!-- 예방관리 계획 삭제 -->
	<delete id="deletePreventionDetail" parameterType="json">
		DELETE FROM Q_586_NEW WHERE Q_586_SEQ = #{Q_586_SEQ}
	</delete>
	
	<!-- 예방관리 실적 삭제 -->
	<delete id="deletePreventionResult" parameterType="json">
		DELETE FROM Q_596_NEW WHERE Q_596_SEQ = #{Q_596_SEQ}
	</delete>
</mapper>