<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dbvalley.premier.scm1.dms7051.mapper.Dms7051Mapper">
	<select id="dms7051List" parameterType="json" resultType="json">
	    select ROWNUM AS ROWNO, A.*,GET_COM_COMPANY_INFO_VENDNM(#{COMPANYCD},VENDCD) as VENDNM,
	    TO_CHAR(TO_DATE(YMD, 'yyyy-mm-dd'),'yyyy.mm.dd') YMDNM
	    from   q_501 a
	    where  a.ymd between SUBSTR(replace(#{S_DATE},'-',''),1,8) and SUBSTR(replace(#{E_DATE},'-',''),1,8) 
	    <if test="VENDCD != null and VENDCD != ''">	  
	     and a.vendcd =  nvl(#{VENDCD}, vendcd)   
	    </if> 	    	  
	    order by ROWNUM, a.ymd desc    
     </select>     
     
     <select id="dms7051PartList" parameterType="json" resultType="json">
	    select * 
	    from q_502
	    where companycd= #{COMPANYCD}
	    and   docu_no = #{DOCU_NO}
	    order by partno
     </select>  
    
     
   	<update id="setdms7051" parameterType="json">
   		<selectKey resultType="string" keyProperty="DOCU_NO" order="BEFORE">
			<choose>
				<when test="DOCU_NO != null and DOCU_NO != ''">
					SELECT #{DOCU_NO} AS DOCU_NO FROM DUAL	
				</when>
				<otherwise>										 
					SELECT 'DOCU' || '-' ||SUBSTR(replace(#{YMD},'-',''),1,8) || '-' ||LPAD(TO_CHAR(TO_NUMBER(NVL(MAX(SUBSTR(DOCU_NO,-3,3)),0)) + 1),3,'0') as s FROM q_501 t
					WHERE T.YMD = SUBSTR(replace(#{YMD},'-',''),1,8)			   
				</otherwise>
			</choose>
        </selectKey>
		MERGE INTO Q_501 A USING (
		SELECT #{COMPANYCD} AS COMPANYCD
		      ,#{DOCU_NO} AS DOCU_NO
		      ,#{VENDCD} AS VENDCD
		      ,REPLACE(#{YMD},'-','') AS YMD
		      ,#{TITLE} AS TITLE
		      ,#{R_DESCR} AS R_DESCR
		      
		      ,#{DOC_ID} AS DOC_ID
		FROM DUAL ) D
		ON (A.COMPANYCD = D.COMPANYCD
		AND A.DOCU_NO = D.DOCU_NO
		)
		WHEN MATCHED THEN
		  UPDATE SET A.VENDCD = D.VENDCD
		            ,A.YMD = D.YMD
		            ,A.TITLE = D.TITLE
		            ,A.R_DESCR = D.R_DESCR
		            
		            ,A.DOC_ID = D.DOC_ID
		WHEN NOT MATCHED THEN
		INSERT(A.COMPANYCD, A.DOCU_NO, A.VENDCD, A.YMD, A.TITLE, A.R_DESCR,  A.DOC_ID)
		VALUES(D.COMPANYCD, D.DOCU_NO, D.VENDCD, D.YMD, D.TITLE, D.R_DESCR,  D.DOC_ID)
  
     </update>
     
    <update id="setdms7051PartNew" parameterType="json">   		
		 insert into q_502
                    (  companycd,   docu_no,   partno,  partnm,  vendcd,    kindcd)
                values  
                    (#{COMPANYCD}, #{DOCU_NO},  #{PARTNO},  #{PARTNM},  #{VENDCD},  #{KINDCD})                        
		     
     </update> 
     
     
     <update id="setdms7051domyeonsend" parameterType="json">   		
		   MERGE INTO DRAW_VENDOR_LIST A USING (
			SELECT #{COMPANYCD} AS COMPANYCD
			      ,#{DRAWNO} AS DRAWNO
			      ,#{APNO} AS APNO
			      ,#{ECO_NO} AS EONO
			      ,SYSDATE AS RECEIPT_YMD
			      ,#{VENDCD} AS RECEIPT_VENDCD
			      ,SYSDATE AS LOGIN_YMD
			      ,#{COMPANYCD} AS LOGIN_COMPANYCD			      
			      ,#{APNM} AS APNM
			FROM DUAL ) D
			ON (A.COMPANYCD = D.COMPANYCD
			AND A.DRAWNO = D.DRAWNO
			AND A.APNO = D.APNO
			AND A.EONO = D.EONO
			)
			WHEN MATCHED THEN
			  UPDATE SET A.RECEIPT_VENDCD = D.RECEIPT_VENDCD
			  			,A.RECEIPT_YMD = D.RECEIPT_YMD			  
			            ,A.LOGIN_YMD = D.LOGIN_YMD
			            ,A.LOGIN_COMPANYCD = D.LOGIN_COMPANYCD			            
			            ,A.APNM = D.APNM         			            
			WHEN NOT MATCHED THEN
			INSERT(A.COMPANYCD, A.DRAWNO, A.APNO, A.EONO, A.RECEIPT_VENDCD, A.RECEIPT_YMD, A.LOGIN_YMD, A.LOGIN_COMPANYCD, A.APNM)
			VALUES(D.COMPANYCD, D.DRAWNO, D.APNO, D.EONO, D.RECEIPT_VENDCD, D.RECEIPT_YMD, D.LOGIN_YMD, D.LOGIN_COMPANYCD, D.APNM)

     </update>     
     
   	<delete id="deldms7051" parameterType="json">      
	delete from q_501
      where   companycd = #{COMPANYCD}
      and       docu_no = #{DOCU_NO}
    </delete>
    
    <delete id="deldms7051Part" parameterType="json">      
	delete from q_502	
      where   companycd = #{COMPANYCD}
      and       docu_no = #{DOCU_NO}
    </delete>
</mapper>