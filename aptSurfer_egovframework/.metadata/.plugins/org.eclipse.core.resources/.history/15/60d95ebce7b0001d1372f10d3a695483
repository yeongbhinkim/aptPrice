<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dbvalley.premier.scm1.kqis9120.mapper.Kqis9120Mapper">

	<select id="selectKqis9120TypeList" parameterType="json"
		resultType="json">
	<choose>
			<when test='SYSTYPE == "A"'>
			  SELECT COMPANYCD,VENDCD,VENDNM,BNO,TO_CHAR(LOGIN_YMD, 'YYYY-MM-DD') AS LOGIN_YMD,
				OWNER_NAME,OWNER_BIRTH,OWNER_LSCHOOL,OWNER_CAREER,PHONE,ADDR,
				LAND_SIZE,BUILD_SIZE,INWON,NOJO_YN,JB1,JB2,JB3,GC1,GC2,GC3,
				BUSINESS_TYPE, TO_CHAR(OPEN_DATE, 'YYYY-MM-DD') AS OPEN_DATE, 
				START_DATE,CPHONE,G_YN,TYPE2, U_VENDCD
		      FROM (
		        SELECT ROWNUM AS ROWNO, LEVEL AS LEVELNO, LEVEL+1 CHASU, LPAD(' ',2*(LEVEL-1))||B.VENDNM AS NAME
		        , B.*, A.U_VENDCD
		        FROM   Q_975 A, Q_970 B
		        WHERE A.COMPANYCD = B.COMPANYCD
		        AND A.VENDCD = B.VENDCD
		        AND A.COMPANYCD = #{COMPANYCD} 
			<choose>
				<when test="VENDCD != null"> AND A.VENDCD = NVL(#{VENDCD},A.VENDCD) </when>
				<otherwise> AND A.VENDCD = NVL(#{VENDCD_S},A.VENDCD) </otherwise>
			</choose>
		        AND NVL(B.BUSINESS_TYPE,'*') LIKE '%'||NVL(#{BUSINESS_TYPE},NVL(B.BUSINESS_TYPE,'*'))||'%'
		        AND NVL(B.TYPE2,1) = NVL(#{TYPE2} , NVL(B.TYPE2,1))
		        AND    'Y' = 'Y' 
		        START WITH A.U_VENDCD = 0 
		        CONNECT BY PRIOR A.VENDCD = A.U_VENDCD)
		      WHERE G_YN = NVL(#{G_YN},G_YN)
			</when>
			<when test='SYSTYPE == "B"'>
			 SELECT COMPANYCD,VENDCD,VENDNM,BNO,TO_CHAR(LOGIN_YMD, 'YYYY-MM-DD') AS LOGIN_YMD,
				OWNER_NAME,OWNER_BIRTH,OWNER_LSCHOOL,OWNER_CAREER,PHONE,ADDR,
				LAND_SIZE,BUILD_SIZE,INWON,NOJO_YN,JB1,JB2,JB3,GC1,GC2,GC3,
				BUSINESS_TYPE, TO_CHAR(OPEN_DATE, 'YYYY-MM-DD') AS OPEN_DATE,
				START_DATE,CPHONE,G_YN,TYPE2 , U_VENDCD
		      FROM (
		        SELECT ROWNUM AS ROWNO, LEVEL AS LEVELNO, LEVEL+1 CHASU, LPAD(' ',2*(LEVEL-1))||B.VENDNM AS NAME
		        , B.*, A.U_VENDCD
		        FROM    Q_975 A, Q_970 B
		        WHERE    A.COMPANYCD = B.COMPANYCD
		        AND      A.VENDCD = B.VENDCD
		        AND      A.COMPANYCD = #{COMPANYCD}
		  	<choose>
				<when test="VENDCD != null"> AND A.VENDCD = NVL(#{VENDCD},A.VENDCD) </when>
				<otherwise> AND A.VENDCD = NVL(#{VENDCD_S},A.VENDCD) </otherwise>
			</choose>
		        AND NVL(B.BUSINESS_TYPE,'*') LIKE '%'||NVL(#{BUSINESS_TYPE},NVL(B.BUSINESS_TYPE,'*'))||'%'
		        START WITH  'Y' = DECODE(#{SYSTYPE}, '0', 'Y', '1', DECODE(#{SYSID}, A.VENDCD, 'Y', 'N'))
		        CONNECT BY PRIOR A.VENDCD = A.U_VENDCD)
		      WHERE NVL(G_YN,'*') = NVL('',NVL(G_YN,'*'))
			</when>
			<otherwise>
	
			</otherwise>
		</choose>
	</select>

	<select id="fndCheck" parameterType="json"
		resultType="int">
	SELECT COUNT(1)
	FROM Q_975
	WHERE ROWNUM = 1
	AND U_VENDCD = #{VENDCD}
	AND COMPANYCD =  #{COMPANYCD}
	</select>
	
	<select id="heightVendnm" parameterType="json"
		resultType="json">
	SELECT VENDNM||'('||BNO||')' as U_VENDNM
	FROM Q_970
	WHERE COMPANYCD =  #{COMPANYCD}
	AND VENDCD = #{VENDCD}
	</select>
	
	<select id="checkAppendable" parameterType="json"
		resultType="json">
	SELECT 'Y' as chkAppend
	FROM Q_970
	WHERE COMPANYCD =  #{COMPANYCD}
	AND VENDCD = #{VENDCD}
	AND ROWNUM = 1
	</select>
	
	<select id="selectKqis9120List" parameterType="json"
		resultType="json">
		SELECT COMPANYCD,VENDCD,VENDNM,BNO,TO_CHAR(LOGIN_YMD, 'YYYY-MM-DD') AS LOGIN_YMD,
				OWNER_NAME,OWNER_BIRTH,OWNER_LSCHOOL,OWNER_CAREER,PHONE,ADDR,
				LAND_SIZE,BUILD_SIZE,INWON,NOJO_YN,JB1,JB2,JB3,GC1,GC2,GC3,
				BUSINESS_TYPE, TO_CHAR(OPEN_DATE, 'YYYY-MM-DD') AS OPEN_DATE,
				START_DATE,CPHONE,G_YN,TYPE2
		FROM Q_970
		WHERE COMPANYCD = #{COMPANYCD}
		<choose>
			<when test="VENDCD != null"> AND VENDCD = NVL(#{VENDCD}, VENDCD) </when>
			<otherwise> AND VENDCD = NVL(#{VENDCD_S}, VENDCD) </otherwise>
		</choose>
	</select>
	
	<select id="chkKqis9120Vendcd" parameterType="json"
		resultType="json">
	   SELECT NVL(MAX(VENDCD),0) + 1 as VENDCD
	    FROM Q_970
	    WHERE COMPANYCD = #{COMPANYCD}
	</select>
	
	<update id="deleteKqis9120" parameterType="json">
	 DELETE FROM Q_970
     WHERE COMPANYCD = #{COMPANYCD}
		    AND VENDCD = #{VENDCD}
	</update>
	
	<update id="deleteKqis9120Vendcd" parameterType="json">
	 DELETE FROM Q_975
     WHERE COMPANYCD = #{COMPANYCD}
		    AND VENDCD = #{VENDCD}
	</update>
	
	<update id="insertKqis9120UVend" parameterType="json">
	
		MERGE INTO Q_975 A USING (
		SELECT #{COMPANYCD} AS COMPANYCD
		      ,#{VENDCD} AS VENDCD
		      ,0 AS U_VENDCD
		      ,#{LOGIN_ID} AS LOGIN_ID
		      ,SYSDATE AS LOGIN_YMD
		FROM DUAL ) D
		ON (A.COMPANYCD = D.COMPANYCD
		AND A.VENDCD = D.VENDCD
		AND A.U_VENDCD = D.U_VENDCD
		)
		WHEN MATCHED THEN
		  UPDATE SET A.LOGIN_ID = D.LOGIN_ID
		            ,A.LOGIN_YMD = D.LOGIN_YMD
		WHEN NOT MATCHED THEN
		INSERT(A.COMPANYCD, A.VENDCD, A.U_VENDCD, A.LOGIN_ID, A.LOGIN_YMD)
		VALUES(D.COMPANYCD, D.VENDCD, D.U_VENDCD, D.LOGIN_ID, D.LOGIN_YMD)
	</update>
	
	<update id="insertKqis9120" parameterType="json">
	MERGE INTO Q_970 A USING (
		SELECT #{COMPANYCD} AS COMPANYCD
		      ,#{VENDCD} AS VENDCD
		      ,#{VENDNM} AS VENDNM
		      ,#{BNO} AS BNO
		      ,#{R_YMD} AS R_YMD
		      ,#{C_0010_KEY} AS C_0010_KEY
		      ,#{LOGIN_ID} AS LOGIN_ID
		      ,SYSDATE AS LOGIN_YMD
		      ,#{OWNER_NAME} AS OWNER_NAME
		      ,#{OWNER_BIRTH} AS OWNER_BIRTH
		      ,#{OWNER_LSCHOOL} AS OWNER_LSCHOOL
		      ,#{OWNER_CAREER} AS OWNER_CAREER
		      ,#{PHONE} AS PHONE
		      ,#{ADDR} AS ADDR
		      ,#{LAND_SIZE} AS LAND_SIZE
		      ,#{BUILD_SIZE} AS BUILD_SIZE
		      ,#{INWON} AS INWON
		      ,#{NOJO_YN} AS NOJO_YN
		      ,#{JB1} AS JB1
		      ,#{JB2} AS JB2
		      ,#{JB3} AS JB3
		      ,#{GC1} AS GC1
		      ,#{GC2} AS GC2
		      ,#{GC3} AS GC3
		      ,#{BUSINESS_TYPE} AS BUSINESS_TYPE
		      ,TO_DATE(REPLACE(#{OPEN_DATE},'-','/'), 'YYYY/MM/DD') AS OPEN_DATE
		      ,#{START_DATE} AS START_DATE
		      ,#{CPHONE} AS CPHONE
		      ,#{G_YN} AS G_YN
		      ,#{TYPE2} AS TYPE2
		FROM DUAL ) D
		ON (A.COMPANYCD = D.COMPANYCD
		AND A.VENDCD = D.VENDCD
		)
		WHEN MATCHED THEN
		  UPDATE SET A.VENDNM = D.VENDNM
		            ,A.BNO = D.BNO
		            ,A.R_YMD = D.R_YMD
		            ,A.C_0010_KEY = D.C_0010_KEY
		            ,A.LOGIN_ID = D.LOGIN_ID
		            ,A.LOGIN_YMD = SYSDATE
		            ,A.OWNER_NAME = D.OWNER_NAME
		            ,A.OWNER_BIRTH = D.OWNER_BIRTH
		            ,A.OWNER_LSCHOOL = D.OWNER_LSCHOOL
		            ,A.OWNER_CAREER = D.OWNER_CAREER
		            ,A.PHONE = D.PHONE
		            ,A.ADDR = D.ADDR
		            ,A.LAND_SIZE = D.LAND_SIZE
		            ,A.BUILD_SIZE = D.BUILD_SIZE
		            ,A.INWON = D.INWON
		            ,A.NOJO_YN = D.NOJO_YN
		            ,A.JB1 = D.JB1
		            ,A.JB2 = D.JB2
		            ,A.JB3 = D.JB3
		            ,A.GC1 = D.GC1
		            ,A.GC2 = D.GC2
		            ,A.GC3 = D.GC3
		            ,A.BUSINESS_TYPE = D.BUSINESS_TYPE
		            ,A.OPEN_DATE = D.OPEN_DATE
		            ,A.START_DATE = D.START_DATE
		            ,A.CPHONE = D.CPHONE
		            ,A.G_YN = D.G_YN
		            ,A.TYPE2 = D.TYPE2
		WHEN NOT MATCHED THEN
		INSERT(
		A.COMPANYCD, A.VENDCD, A.VENDNM, A.BNO, A.R_YMD, A.C_0010_KEY, A.LOGIN_ID
		, A.LOGIN_YMD, A.OWNER_NAME, A.OWNER_BIRTH, A.OWNER_LSCHOOL, A.OWNER_CAREER
		, A.PHONE, A.ADDR, A.LAND_SIZE, A.BUILD_SIZE, A.INWON, A.NOJO_YN, A.JB1, A.JB2
		, A.JB3, A.GC1, A.GC2, A.GC3, A.BUSINESS_TYPE, A.OPEN_DATE, A.START_DATE
		, A.CPHONE, A.G_YN, A.TYPE2)
		VALUES(
		D.COMPANYCD, D.VENDCD, D.VENDNM, D.BNO, trunc(sysdate), D.C_0010_KEY, D.LOGIN_ID
		, SYSDATE, D.OWNER_NAME, D.OWNER_BIRTH, D.OWNER_LSCHOOL, D.OWNER_CAREER
		, D.PHONE, D.ADDR, D.LAND_SIZE, D.BUILD_SIZE, D.INWON, D.NOJO_YN, D.JB1, D.JB2
		, D.JB3, D.GC1, D.GC2, D.GC3, D.BUSINESS_TYPE, D.OPEN_DATE, D.START_DATE
		, D.CPHONE, D.G_YN, D.TYPE2)

	</update>

	<select id="selectSJSeq" parameterType="json" resultType="json">
		 SELECT NVL(MAX(SEQ),0)+1 as SEQ
		    FROM Q_971
		    WHERE COMPANYCD = #{COMPANYCD}
		    AND VENDCD = #{VENDCD}
	</select>
	

	<select id="selectSJList" parameterType="json" resultType="json">
		SELECT ROWNUM RNO, A.*
	       FROM Q_971 A
	  	   WHERE COMPANYCD = #{COMPANYCD}
		   AND VENDCD = #{VENDCD}
		   ORDER BY SEQ DESC
	</select>
	
	<select id="selectSJSeqList" parameterType="json" resultType="json">
		SELECT *
	       FROM Q_971
	  	   WHERE COMPANYCD = #{COMPANYCD}
		   AND VENDCD = #{VENDCD}
		   AND SEQ = #{SEQ}
	</select>
	
	<update id="deleteKqis9120SJ" parameterType="json">
		DELETE FROM Q_971
     	  WHERE COMPANYCD = #{COMPANYCD}
		  AND VENDCD = #{VENDCD}
		  
		  <if test="SEQ != null and SEQ != ''">
	      AND SEQ = #{SEQ}
 		 </if>
		  
	</update>
	
	<update id="insertKqis9120SJ" parameterType="json">
	MERGE INTO Q_971 A USING (
		SELECT #{COMPANYCD} AS COMPANYCD
		      ,#{VENDCD} AS VENDCD
		      ,#{SEQ} AS SEQ
		      ,#{PARTNM} AS PARTNM
		      ,#{LOGIN_ID} AS LOGIN_ID
		      ,SYSDATE AS LOGIN_YMD
		      ,#{JHL} AS JHL
		      ,#{PARTNO} AS PARTNO
		      ,#{DESCR} AS DESCR
		FROM DUAL ) D
		ON (A.COMPANYCD = D.COMPANYCD
		AND A.VENDCD = D.VENDCD
		AND A.SEQ = D.SEQ
		)
		WHEN MATCHED THEN
		  UPDATE SET A.PARTNM = D.PARTNM
		            ,A.LOGIN_ID = D.LOGIN_ID
		            ,A.LOGIN_YMD = D.LOGIN_YMD
		            ,A.JHL = D.JHL
		            ,A.PARTNO = D.PARTNO
		            ,A.DESCR = D.DESCR
		WHEN NOT MATCHED THEN
		INSERT(A.COMPANYCD, A.VENDCD, A.SEQ, A.PARTNM, A.LOGIN_ID, A.LOGIN_YMD, A.JHL, A.PARTNO, A.DESCR)
		VALUES(D.COMPANYCD, D.VENDCD, D.SEQ, D.PARTNM, D.LOGIN_ID, D.LOGIN_YMD, D.JHL, D.PARTNO, D.DESCR)
		
	</update>
	
	<select id="selectFNList" parameterType="json" resultType="json">
	      SELECT ROWNUM RNO, A.*
	       FROM Q_972 A
	  	   WHERE COMPANYCD = #{COMPANYCD}
		   AND VENDCD = #{VENDCD}
		   ORDER BY YY DESC
	</select>
	
	<select id="selectFNYYList" parameterType="json" resultType="json">
	      SELECT *
	       FROM Q_972
	  	   WHERE COMPANYCD = #{COMPANYCD}
		   AND VENDCD = #{VENDCD}
		   AND YY = #{YY}
	</select>
	
	<update id="deleteKqis9120FN" parameterType="json">
		DELETE FROM Q_972
     	  WHERE COMPANYCD = #{COMPANYCD}
		  AND VENDCD = #{VENDCD}
		  <if test="YY != null and YY != ''">
	      AND YY = #{YY}
 		 </if>
	</update>
	
	<update id="insertKqis9120FN" parameterType="json">
		MERGE INTO Q_972 A USING (
	SELECT #{COMPANYCD} AS COMPANYCD
	      ,#{VENDCD} AS VENDCD
	      ,#{YY} AS YY
	      ,#{ACC1} AS ACC1
	      ,#{ACC2} AS ACC2
	      ,#{ACC3} AS ACC3
	      ,#{ACC4} AS ACC4
	      ,#{ACC5} AS ACC5
	      ,#{ACC6} AS ACC6
	      ,#{ACC7} AS ACC7
	      ,#{ACC8} AS ACC8
	      ,#{ACC9} AS ACC9
	      ,#{LOGIN_ID} AS LOGIN_ID
	      ,SYSDATE AS LOGIN_YMD
	      ,#{ACC10} AS ACC10
	      ,#{ACC11_A} AS ACC11_A
	      ,#{ACC11_B} AS ACC11_B
	      ,#{ACC12} AS ACC12
	      ,#{ACC13} AS ACC13
	      ,#{ACC14} AS ACC14
	      ,#{ACC15} AS ACC15
	FROM DUAL ) D
	ON (A.COMPANYCD = D.COMPANYCD
	AND A.VENDCD = D.VENDCD
	AND A.YY = D.YY
	)
	WHEN MATCHED THEN
	  UPDATE SET A.ACC1 = D.ACC1
	            ,A.ACC2 = D.ACC2
	            ,A.ACC3 = D.ACC3
	            ,A.ACC4 = D.ACC4
	            ,A.ACC5 = D.ACC5
	            ,A.ACC6 = D.ACC6
	            ,A.ACC7 = D.ACC7
	            ,A.ACC8 = D.ACC8
	            ,A.ACC9 = D.ACC9
	            ,A.LOGIN_ID = D.LOGIN_ID
	            ,A.LOGIN_YMD = D.LOGIN_YMD
	            ,A.ACC10 = D.ACC10
	            ,A.ACC11_A = D.ACC11_A
	            ,A.ACC11_B = D.ACC11_B
	            ,A.ACC12 = D.ACC12
	            ,A.ACC13 = D.ACC13
	            ,A.ACC14 = D.ACC14
	            ,A.ACC15 = D.ACC15
	WHEN NOT MATCHED THEN
	INSERT(A.COMPANYCD, A.VENDCD, A.YY, A.ACC1, A.ACC2, A.ACC3, A.ACC4, A.ACC5, A.ACC6, A.ACC7, A.ACC8
	, A.ACC9, A.LOGIN_ID, A.LOGIN_YMD, A.ACC10, A.ACC11_A, A.ACC11_B, A.ACC12, A.ACC13, A.ACC14, A.ACC15)
	VALUES(D.COMPANYCD, D.VENDCD, D.YY, D.ACC1, D.ACC2, D.ACC3, D.ACC4, D.ACC5, D.ACC6, D.ACC7, D.ACC8
	, D.ACC9, D.LOGIN_ID, D.LOGIN_YMD, D.ACC10, D.ACC11_A, D.ACC11_B, D.ACC12, D.ACC13, D.ACC14, D.ACC15)

	</update>
	
	<select id="selectMLSeq" parameterType="json" resultType="json">
		   SELECT NVL(MAX(SEQ),0)+1 as SEQ
		    FROM Q_973
		    WHERE COMPANYCD = #{COMPANYCD}
		    AND VENDCD = #{VENDCD}
	</select>
	
	<select id="selectMLList" parameterType="json" resultType="json">
	      SELECT ROWNUM RNO, A.*
	       FROM Q_973 A
	  	   WHERE COMPANYCD = #{COMPANYCD}
		   AND VENDCD = #{VENDCD}
		   ORDER BY SEQ DESC
	</select>
	
	<select id="selectMLSeqList" parameterType="json" resultType="json">
	      SELECT *
	       FROM Q_973
	  	   WHERE COMPANYCD = #{COMPANYCD}
		   AND VENDCD = #{VENDCD}
		   AND SEQ = #{SEQ}
	</select>
	
	<update id="deleteKqis9120ML" parameterType="json">
		DELETE FROM Q_973
     	  WHERE COMPANYCD = #{COMPANYCD}
		  AND VENDCD = #{VENDCD}
		  <if test="SEQ != null and SEQ != ''">
	      AND SEQ = #{SEQ}
 		 </if>
	</update>
	
	<update id="insertKqis9120ML" parameterType="json">
				MERGE INTO Q_973 A USING (
		SELECT #{COMPANYCD} AS COMPANYCD
		      ,#{VENDCD} AS VENDCD
		      ,#{SEQ} AS SEQ
		      ,#{CUSTNM} AS CUSTNM
		      ,#{CAPNM} AS CAPNM
		      ,#{CAMT} AS CAMT
		      ,#{CDESCR} AS CDESCR
		      ,#{LOGIN_ID} AS LOGIN_ID
		      ,SYSDATE AS LOGIN_YMD
		FROM DUAL ) D
		ON (A.COMPANYCD = D.COMPANYCD
		AND A.VENDCD = D.VENDCD
		AND A.SEQ = D.SEQ
		)
		WHEN MATCHED THEN
		  UPDATE SET A.CUSTNM = D.CUSTNM
		            ,A.CAPNM = D.CAPNM
		            ,A.CAMT = D.CAMT
		            ,A.CDESCR = D.CDESCR
		            ,A.LOGIN_ID = D.LOGIN_ID
		            ,A.LOGIN_YMD = D.LOGIN_YMD
		WHEN NOT MATCHED THEN
		INSERT(A.COMPANYCD, A.VENDCD, A.SEQ, A.CUSTNM, A.CAPNM, A.CAMT, A.CDESCR, A.LOGIN_ID, A.LOGIN_YMD)
		VALUES(D.COMPANYCD, D.VENDCD, D.SEQ, D.CUSTNM, D.CAPNM, D.CAMT, D.CDESCR, D.LOGIN_ID, D.LOGIN_YMD)

	</update>
	
	<select id="selectQLSeq" parameterType="json" resultType="json">
	     SELECT NVL(MAX(SEQ),0)+1 as SEQ
		    FROM Q_974
		 	WHERE   COMPANYCD = #{COMPANYCD}
	      	AND VENDCD = #{VENDCD}
	</select>
	
	<select id="selectQLList" parameterType="json" resultType="json">
	       SELECT ROWNUM RNO, A.COMPANYCD,A.VENDCD,A.SEQ,A.BUSINESS_TYPE
	       ,A.EV_VENDNM,A.EV_GRADE,A.LOGIN_ID,A.LOGIN_YMD,A.EV_NAME
	       ,TO_CHAR(A.EV_REGI_DATE, 'yyyy/mm/dd') AS EV_REGI_DATE
	       ,TO_CHAR(A.EV_END_DATE, 'yyyy/mm/dd') AS EV_END_DATE
	       ,A.DESCR,A.DESCR2,A.EV_NO
	       FROM q_974 A
	  	   WHERE COMPANYCD = #{COMPANYCD}
		   AND VENDCD = #{VENDCD}
		   ORDER BY SEQ DESC
	</select>
	
	<select id="selectQLSeqList" parameterType="json" resultType="json">
	     SELECT COMPANYCD, VENDCD, SEQ, BUSINESS_TYPE, EV_VENDNM
	     , EV_GRADE, LOGIN_ID, LOGIN_YMD, EV_NAME
	     , TO_CHAR(EV_REGI_DATE, 'yyyy/mm/dd') AS EV_REGI_DATE
	     , TO_CHAR(EV_END_DATE, 'yyyy/mm/dd') AS EV_END_DATE
	     , DESCR, DESCR2, EV_NO
	       FROM q_974
	  	   WHERE COMPANYCD = #{COMPANYCD}
		   AND VENDCD = #{VENDCD}
		   AND SEQ = #{SEQ}
	</select>
	
	<update id="deleteKqis9120QL" parameterType="json">
		DELETE FROM q_974
     	  WHERE COMPANYCD = #{COMPANYCD}
		  AND VENDCD = #{VENDCD}
	     <if test="SEQ != null and SEQ != ''">
	      AND SEQ = #{SEQ}
 		 </if>
	</update>
	
	<update id="insertKqis9120QL" parameterType="json">
			MERGE INTO Q_974 A USING (
		SELECT #{COMPANYCD} AS COMPANYCD
		      ,#{VENDCD} AS VENDCD
		      ,#{SEQ} AS SEQ
		      ,#{BUSINESS_TYPE} AS BUSINESS_TYPE
		      ,#{EV_VENDNM} AS EV_VENDNM
		      ,#{EV_GRADE} AS EV_GRADE
		      ,#{LOGIN_ID} AS LOGIN_ID
		      ,SYSDATE AS LOGIN_YMD
		      ,#{EV_NAME} AS EV_NAME
		      ,#{EV_REGI_DATE} AS EV_REGI_DATE
		      ,#{EV_END_DATE} AS EV_END_DATE
		      ,#{DESCR} AS DESCR
		      ,#{DESCR2} AS DESCR2
		      ,#{EV_NO} AS EV_NO
		FROM DUAL ) D
		ON (A.COMPANYCD = D.COMPANYCD
		AND A.VENDCD = D.VENDCD
		AND A.SEQ = D.SEQ
		)
		WHEN MATCHED THEN
		  UPDATE SET A.BUSINESS_TYPE = D.BUSINESS_TYPE
		            ,A.EV_VENDNM = D.EV_VENDNM
		            ,A.EV_GRADE = D.EV_GRADE
		            ,A.LOGIN_ID = D.LOGIN_ID
		            ,A.LOGIN_YMD = D.LOGIN_YMD
		            ,A.EV_NAME = D.EV_NAME
		            ,A.EV_REGI_DATE = D.EV_REGI_DATE
		            ,A.EV_END_DATE = D.EV_END_DATE
		            ,A.DESCR = D.DESCR
		            ,A.DESCR2 = D.DESCR2
		            ,A.EV_NO = D.EV_NO
		WHEN NOT MATCHED THEN
		INSERT(A.COMPANYCD, A.VENDCD, A.SEQ, A.BUSINESS_TYPE, A.EV_VENDNM, A.EV_GRADE, A.LOGIN_ID, A.LOGIN_YMD
		, A.EV_NAME, A.EV_REGI_DATE, A.EV_END_DATE, A.DESCR, A.DESCR2, A.EV_NO)
		VALUES(D.COMPANYCD, D.VENDCD, D.SEQ, D.BUSINESS_TYPE, D.EV_VENDNM, D.EV_GRADE, D.LOGIN_ID, D.LOGIN_YMD
		, D.EV_NAME, D.EV_REGI_DATE, D.EV_END_DATE, D.DESCR, D.DESCR2, D.EV_NO)

	</update>
	
	<select id="selectPSSeq" parameterType="json" resultType="json">
	     SELECT NVL(MAX(SEQ),0)+1 as SEQ
		    FROM q_976
		 	WHERE   COMPANYCD = #{COMPANYCD}
	      	AND VENDCD = #{VENDCD}
	</select>
	
	<select id="selectPSList" parameterType="json" resultType="json">
	    SELECT ROWNUM RNO, A.*
	       FROM q_976 A
	  	   WHERE COMPANYCD = #{COMPANYCD}
		   AND VENDCD = #{VENDCD}
		   ORDER BY SEQ DESC
	</select>
	
	<select id="selectPSSeqList" parameterType="json" resultType="json">
	    SELECT *
	       FROM q_976
	  	   WHERE COMPANYCD = #{COMPANYCD}
		   AND VENDCD = #{VENDCD}
		   AND SEQ = #{SEQ}
	</select>
	
	<update id="deleteKqis9120PS" parameterType="json">
		DELETE FROM q_976
     	  WHERE COMPANYCD = #{COMPANYCD}
		  AND VENDCD = #{VENDCD}
	     <if test="SEQ != null and SEQ != ''">
	      AND SEQ = #{SEQ}
 		 </if>
	</update>
	
	<update id="insertKqis9120PS" parameterType="json">
				MERGE INTO Q_976 A USING (
		SELECT #{COMPANYCD} AS COMPANYCD
		      ,#{VENDCD} AS VENDCD
		      ,#{ACC1} AS ACC1
		      ,#{ACC2} AS ACC2
		      ,#{ACC3} AS ACC3
		      ,#{ACC4} AS ACC4
		      ,#{ACC5} AS ACC5
		      ,#{ACC6} AS ACC6
		      ,#{ACC7} AS ACC7
		      ,#{LOGIN_ID} AS LOGIN_ID
		      ,SYSDATE AS LOGIN_YMD
		      ,#{SEQ} AS SEQ
		      ,#{DEPTNM} AS DEPTNM
		FROM DUAL ) D
		ON (A.COMPANYCD = D.COMPANYCD
		AND A.VENDCD = D.VENDCD
		AND A.SEQ = D.SEQ
		)
		WHEN MATCHED THEN
		  UPDATE SET A.ACC1 = D.ACC1
		            ,A.ACC2 = D.ACC2
		            ,A.ACC3 = D.ACC3
		            ,A.ACC4 = D.ACC4
		            ,A.ACC5 = D.ACC5
		            ,A.ACC6 = D.ACC6
		            ,A.ACC7 = D.ACC7
		            ,A.LOGIN_ID = D.LOGIN_ID
		            ,A.LOGIN_YMD = D.LOGIN_YMD
		            ,A.DEPTNM = D.DEPTNM
		WHEN NOT MATCHED THEN
		INSERT(A.COMPANYCD, A.VENDCD, A.ACC1, A.ACC2, A.ACC3, A.ACC4, A.ACC5, A.ACC6
		, A.ACC7, A.LOGIN_ID, A.LOGIN_YMD, A.SEQ, A.DEPTNM)
		VALUES(D.COMPANYCD, D.VENDCD, D.ACC1, D.ACC2, D.ACC3, D.ACC4, D.ACC5, D.ACC6
		, D.ACC7, D.LOGIN_ID, D.LOGIN_YMD, D.SEQ, D.DEPTNM)

	</update>
	
	
</mapper>